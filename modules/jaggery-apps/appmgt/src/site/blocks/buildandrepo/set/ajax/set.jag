<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");
    
    var log = new Log();
    var modPermission = jagg.module("permission");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if (action == "setBuildDelpymentConfigs") {
    	mod = jagg.module("lifecycle");
        var response = {};
	    var applicationKey = request.getParameter("applicationKey");
	    var stageName = request.getParameter("stageName");
	    var version = request.getParameter("version");
	    var isAutoBuildEnable = request.getParameter("autoBuild");
	    var isAutoDeployEnable = request.getParameter("autoDep");
        var modManager = jagg.module("manager");
        if (jagg.module("permission").isUserAccessGrantedForPlatform(PERMISSION_BUILD)){
            try {
                var autoDep= mod.updateAutoDeployment(applicationKey, stageName, version, isAutoDeployEnable);
                
    	        var autoBuild = "false";
                var applicationType = modManager.getApplicationType(applicationKey);
                var isBuildableAppType = modManager.getApplicationTypeBean(applicationType).isBuildable();
                if(isBuildableAppType === 'true' || isBuildableAppType === true){
                    autoBuild = mod.updateAutoBuild(applicationKey, stageName, version, isAutoBuildEnable);
                }else{
                    autoBuild = "true";
                }
                var Result={};
                Result.autoDeploy=autoDep;
                Result.autoBuild=autoBuild;

                print(Result);
            } catch (e) {
                throw e.message;
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to set the build deployment configs";
            print(response);
        }


    }else if(action == "createFork") {
    	//This method is used to do a fork request against selected application for the first time.
    	mod = jagg.module("repository");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var tenantAwareUserNameArray = request.getParameter("userNameArray").split(",");
        var type = request.getParameter("type");
        var version = request.getParameter("version");
        var authorizedUsersToOwnForkedRepos = [];

        for(var i =0 ; i< tenantAwareUserNameArray.length ; i++){
       		//Adding autherized user from the user list to new array.
              authorizedUsersToOwnForkedRepos.push(tenantAwareUserNameArray[i]);
        }
        var response = {};
        //Check the permission for current logged in user whether he is already autherized to do this fork request or not
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_DEVELOP) && authorizedUsersToOwnForkedRepos.length != 0){
            try {
                return mod.createFork(applicationKey, authorizedUsersToOwnForkedRepos, type,version);
            } catch (e) {
                log.error(e.message);
                throw e.message;
            }
        } else{
            response.result = 0;
            response.message = "authorizedUsers array is empty or you don't have permission to fork the repository";
            print(response);
        }

    }else if(action == "createForkBranch") {
    	//This method id used to add a new branches to the forked repository created by owner of master that was not available when do the first fork. 
    	mod = jagg.module("repository");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var tenantAwareUserNameArray = request.getParameter("userNameArray").split(",");
        var type = request.getParameter("type");
        var version = request.getParameter("version");
        var authorizedUsersToOwnForkedRepos = [];

        for(var i =0 ; i< tenantAwareUserNameArray.length ; i++){
         
        	//Adding autherized user from the user list to new array.
              authorizedUsersToOwnForkedRepos.push(tenantAwareUserNameArray[i]);
        }
        var response = {};
        //Check the permission for current logged in user whether he is already autherized to do this fork request or not
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_DEVELOP) && authorizedUsersToOwnForkedRepos.length != 0){
            try {
                return mod.createForkBranch(applicationKey, authorizedUsersToOwnForkedRepos, type,version);
            } catch (e) {
                log.error(e.message);
                throw e.message;
            }
        } else{
            response.result = 0;
            response.message = "authorizedUsers array is empty or you don't have permission to fork the repository";
            print(response);
        }

    }else {
        throw new Error("No action specified");
    }
}());
%>
