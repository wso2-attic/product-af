<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include('/jagg/constants.jag');
include('/jagg/config_reader.jag');
include("/jagg/util.jag");
jagg.block("resources/list", {
    initialize: function (data) {

    },
    getInputs: function () {
        return {
            "applicationKey": null
        }
    },

    getOutputs: function (inputs) {
    	var log = new Log();
    	var permissionModule = jagg.module("permission");
    	var datasourceModule = jagg.module("resources");
    	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
    	var hasConfigureDbAdministrationPermissions = {};
    	var hasConfigureResourcePermissions = {};
    	var datasources = {};
    	var hasDataSourceModifyPermission =  false;
    	var isDataSourceRetrieveSucceeded = false;
    	for (var i = 0; i < deploymentStages.length; i++) {
    		// TODO - remove these
    		var hasConfigureDbAdministrationPermission = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_RESOURCES_UPDATE_FOR_STAGE + deploymentStages[i]);
    		hasConfigureDbAdministrationPermissions[i] = hasConfigureDbAdministrationPermission;

    		var hasConfigureResourcePermission = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_RESOURCES_UPDATE_FOR_STAGE + deploymentStages[i]);
    		hasConfigureDbAdministrationPermissions[i] = hasConfigureResourcePermission;

    		if(permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_RESOURCES_UPDATE_FOR_STAGE + deploymentStages[i])){
    			hasDataSourceModifyPermission =true;
    		}
    	}
    	if(!isDataSourceRetrieveSucceeded){
    		datasources = null;
    	}
    	var hasDataSourceCreatePermission =  jagg.module("permission").isUserAccessGranted(inputs.applicationKey, PERMISSION_DATASOURCE_CREATE);
    	var hasTenantAdminPermission =  jagg.module("permission").hasTenantLevelUserMgtPermission();
    	var hasConfigureAPIManagerPermission = jagg.module("permission").isUserAccessGranted(inputs.applicationKey, PERMISSION_CONFIGURATION_API_MANAGER);
        var hasCreateResourcePermissions= hasUILevelResourceCreationPermission(inputs.applicationKey);
	    var helpTips = jagg.module("help").getHelpTips("resourcesOverview");
    	return {
    	    "hasCreateResourcePermissions": hasCreateResourcePermissions,
    		"hasConfigureDbAdministrationPermission": hasConfigureDbAdministrationPermissions,
    		"hasConfigureAPIManagerPermission": hasConfigureAPIManagerPermission,
    		"hasConfigureResourcePermission": hasConfigureResourcePermissions,
    		"hasDataSourceCreatePermission":hasDataSourceCreatePermission,
    		"hasDataSourceModifyPermission":hasDataSourceModifyPermission,
            "hasTenantAdminPermission":hasTenantAdminPermission,
	        "helpTips":helpTips
    	};
    }


});
%>
