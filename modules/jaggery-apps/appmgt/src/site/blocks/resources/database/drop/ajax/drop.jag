<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");


var log= new Log();
var response = {};

var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.ResourceRelatedEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;
var loggedInUser = jagg.getUser();

(function () {
    var mod, obj, result, modPermission,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if (action == "dropDatabase") {
        mod = jagg.module("resources");
        var applicationKey = request.getParameter("applicationKey");
        var databaseName = request.getParameter("databaseName");
        var databaseServerInstanceName = request.getParameter("rssInstanceName");
        var deleteDatasource= request.getParameter("deleteDatasource");

        var response = {};
        modPermission = jagg.module("permission");
        var stage = mod.getStageFromRssInstanceName(databaseServerInstanceName);
        var hasDbConfigPermission = modPermission.isUserAccessGranted(applicationKey,
        		PERMISSION_RESOURCES_CREATE_FOR_STAGE +stage);
        
        if(hasDbConfigPermission){
            try{
                var notificationTitle  = "Database " + databaseName + " delete started in " + stage;
                var correlationKey = applicationKey + "-" + stage + "-database-" + databaseName;
                var eventBuilderInstance = EventBuilder.resourceDeletionStartedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending delete database start notification \n" + e.message);
            }
            try {
                mod.dropDatabase(applicationKey,databaseName,databaseServerInstanceName);
                if(deleteDatasource=="true"){
                	mod.deleteDatasource(applicationKey, databaseServerInstanceName, databaseName);
                }
            } catch(e) {
                throw "Error while deleting the database";
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to drop databases";
            print(response);
        }



    } else {
        throw new Error("No action specified");

	}
}());
%>

