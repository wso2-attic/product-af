<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/util.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");
    var log=new Log("blocks/resources/registry/add/ajax/add.jag");
    var modPermission = jagg.module("permission");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if (action == "createResource") {
    	mod = jagg.module("resources");
    	var lifeCycleModule = jagg.module("lifecycle");
    	var applicationKey = request.getParameter("applicationKey");
    	var resourceName = request.getParameter("resourceName");
    	var resourceDescription = request.getParameter("resourceDescription");
    	var resourceMediaType = request.getParameter("resourceMediaType");
    	var contentValue = request.getParameter("contentValue");
    	var stage = request.getParameter("stage");
    	var copyToAll=request.getParameter("copyToAll");

        var response = {};
        var stages = [stage];
        var allStages= lifeCycleModule.getStages(applicationKey);
        if((copyToAll=="true")&&jagg.module("manager").checkPermissionforStages(applicationKey,allStages)){
        	stages=allStages;
        }
        try {
            mod.addPropertyToStages(resourceName, contentValue, resourceDescription, resourceMediaType,
                applicationKey, stages);
            mod.addPropertyToDatabase(resourceName, resourceMediaType, applicationKey, resourceDescription, stages);
        } catch(e) {
            log.error("Error while creating resources");
            log.error(e);
            throw e;
        }

    } else if (action == "deleteResource") {
        mod = jagg.module("resources");
        var lifeCycleModule = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var resourceName = request.getParameter("resourceName");
        var resourceDescription = request.getParameter("resourceDescription");
        var resourceMediaType = request.getParameter("resourceMediaType");
        var contentValue = request.getParameter("contentValue");
        var stage = request.getParameter("stage");

        var response = {};
        if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_CREATE_FOR_STAGE + stage)){
            try {
            	mod.deletePropertyFromStages(resourceName, resourceMediaType, contentValue, resourceDescription, applicationKey, [stage]);
            } catch (e) {
            	 throw "Error while creating an resource "+e.toString();
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to resource " + resourceName + " from stage " + stage;
            print(response);
        }
    } else {
        throw new Error("No action specified");
    }
}());
%>
