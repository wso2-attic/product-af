<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/util.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log();
(function () {
	var mod, obj, result,
	action = request.getParameter("action"),
	site = require("/site/conf/site.json");
    var modLifecycle = jagg.module("lifecycle");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if(action == "getAllDependencyList") {
        var mod = jagg.module("resources");
        var applicationKey = request.getParameter("applicationKey");
        var resourceType = request.getParameter("resourceType");
        var stages = modLifecycle.getStages(applicationKey);
                //getProperties(DEPLOYMENT_STAGES);
        var modPermission = jagg.module("permission");
        var result = {};
        var properties;
        for (var i = 0; i < stages.length; i++) {
            var stage = stages[i];
            if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_READ_FOR_STAGE + stage)) {
                try {
                    properties = mod.getPropertiesInEnvironment(applicationKey, resourceType, stage);
                    for (var index in properties) {
                        var property = properties[index];
                        var resultProperty = {};
                        resultProperty.description = property.description;
                        result[property.name] = resultProperty;
                    }
                } catch (e) {
                    var msg = "Error while getting list of properties for application : " + applicationKey;
                    log.error(msg);
                    log.error(e);
                    response.status = 500;
                    response.content = msg;
                }
            }
        }
        print(result);
    } else if (action == "getAllDependencies") {
        var mod = jagg.module("resources");
        var permissionModule = jagg.module("permission");
        var dependencies = {};
        var response = {};
        var applicationKey = request.getParameter("applicationKey");
        var allStages = modLifecycle.getStages(applicationKey);
        var allowedStages=getAllowedStages(allStages,PERMISSION_RESOURCES_READ_FOR_STAGE,applicationKey);

        var result={};
        try {
            dependencies = mod.getDetailedPropertyValuesInStages(applicationKey,allowedStages);
            for(var stage in dependencies){
                var tmpStage=dependencies[stage];
                for(var regEntry in tmpStage){
                    var tmpRegEntry=tmpStage[regEntry];
                    if(tmpRegEntry.mediaType!="External API" && tmpRegEntry.mediaType=="Registry" || tmpRegEntry.mediaType=="application/vnd.wso2.esb.endpoint" ){
                        var resultEntry=result[tmpRegEntry.name];
                        if(resultEntry==null){
                            resultEntry=result[tmpRegEntry.name]={
                            };
                            resultEntry.description=tmpRegEntry.description;
                            resultEntry.environments={
                            };
                        }
                        resultEntry.environments[stage]={
                        };
                        resultEntry.environments[stage].value=tmpRegEntry.value;
                    }
                }
            }
            if (result != null) {
                print(result);
            } else {
                throw "Error while getting the resources of application";
            }
        } catch (e) {
            throw "Error while getting dependent resources " + e.toString();
        }
	} else if (action == "getResource") {

		var mod = jagg.module("resources");
		var dependency = {
		};
		var applicationKey = request.getParameter("applicationKey");
		var stage = request.getParameter("stage");
		var resourceName = request.getParameter("resourceName");
		var permissionModule = jagg.module("permission");

		var response = {
		};

		var hasPermissionToStage = permissionModule.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_READ_FOR_STAGE + stage);
		if (hasPermissionToStage) {
			try {
				dependency = mod.getDetailedPropertyValueInStage(resourceName, applicationKey, stage);
				if (dependency != null) {
					print(dependency);
				} else {
					throw "Error while getting the resources of application";
				}
			} catch (e) {
				throw "Error while getting dependent resources " + e.toString();
			}
		} else {
			response.result = 0;
			response.message = "You don't have permission to get resource";
			print(response);
		}


	} else if (action == "propertyExistInStages") {
        mod = jagg.module("resources");
        var applicationKey = request.getParameter("applicationKey");
        var propertyName = request.getParameter("propertyName");
        var givenValues = request.getParameter("givenValues");
        var copyToAll = request.getParameter("copyToAll");
        var stageArray = givenValues.split("::stage:");
	if(stageArray.length > 1){
            var stageString = stageArray[1];
            var splits = stageString.split(":auth:");
            var stage = splits[0].split(":")[0];
	}else{
 	    var stage = stageArray;
	}
        var existInStages = false;
        if(copyToAll && copyToAll == "true"){
            var targetStages = modLifecycle.getStages(applicationKey);
                    //getProperties(DEPLOYMENT_STAGES);
        }else{
            var targetStages = [stage];
        }
            try {
                for(var i in targetStages){
                    existInStages = mod.propertyExistsInStages(propertyName, applicationKey, [targetStages[i]]);
                    if(existInStages){
                        print(existInStages);
                        return;
                    }
                }
                log.debug(existInStages);
            } catch (e) {
                log.error(e);
                throw "Error while reading resources from environments";
            }
        print(existInStages);
        }else {
		throw new Error("No action specified");
	}
}());
%>
