<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

(function () {
    var mod, obj, result,
    action = request.getParameter("action"),
    site = require("/site/conf/site.json");
    var log=new Log();
    mod = jagg.module("resources");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    var modPermission = jagg.module("permission");
	var modLifecycle = jagg.module("lifecycle");
    if (action == "getExternalAPIs") {
    	
    	var applicationKey = request.getParameter("applicationKey");
        var response = {};
        var externalAPIs = {};
        var stages = modLifecycle.getStages(applicationKey);
				//getProperties(DEPLOYMENT_STAGES);
        for (var i = 0; i < stages.length; i++) {
        	var stage = stages[i];
    		if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_READ_FOR_STAGE + stage)){
    			var response = mod.getDetailedPropertyValuesInStages(applicationKey , [stage])[stage];
 	            for (var propIndex in response) {
 	                var property = response[propIndex];
 	           
 	                if (property.mediaType == "External API") {
 	                    var apiName = property.name;
 	                    var description = property.description;
                        var externalApi = {};
                        var details = [];
                        if (externalAPIs[apiName]) {
                            externalApi = externalAPIs[apiName];
                            details = externalApi["details"];
                        }
 	                    var detail = mod.getDetailedPropertyValuesInStages(applicationKey + "/" + apiName, [stage]);
 	                    details.push(detail);
 	                   externalApi.description = description;
                       externalApi["details"] = details;
                       externalAPIs[apiName] = externalApi;;
 	                }
 	            }
	        } else {
                if(log.isDebugEnabled()){
                    log.debug("You don't have permission to get External APIs for stage " +stage);
                }
	        }
        }
      
         print(externalAPIs);
    } else if (action == "getCreatePermittedEnvironments") {
    	var applicationKey = request.getParameter("applicationKey");
    	var permittedStages = [];
        var stages = modLifecycle.getStages(applicationKey);
				//getProperties(DEPLOYMENT_STAGES);
        log.debug(stages);
        for (var i = 0; i < stages.length; i++) {
        	var stage = stages[i];
        	var result=modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_CREATE_FOR_STAGE + stage);
    		if(result){
    			permittedStages.push(stage);
	        } else {
                if (log.isDebugEnabled()) {
                    log.debug("You don't have permission to create resources in stage " + stage);
                }
	        }
        }
         print(permittedStages);
    } else if (action == "getUpdatePermittedData") {
    	var applicationKey = request.getParameter("applicationKey");
    	var resourceName = request.getParameter("resourceName");
    	var stage = request.getParameter("stage");
    	var data = {};
	    
			if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_READ_FOR_STAGE + stage)){
				var externalAPI = {};
				var values = mod.getDetailedPropertyValuesInStages(applicationKey + "/" + resourceName, [stage]); 
				//externalAPI['api_stage'] = stage;
				externalAPI['api_name'] = resourceName;
				
				// Empty check to avoid adding stages which has no apis/properties
				var isEmpty = true;
				for (var stageName in values) {
					var stageData = values[stageName];
					var properties = {};
					for (var propIndex in stageData) {
						isEmpty = false;
						var property = stageData[propIndex];
						if(property.name == 'authentication'){
							externalAPI['api_auth']= property.value;
						}
						else{
							externalAPI["api_" +property.name] = property.value;
						}
					}
				}
				
				if(!isEmpty){
					data[stage]=externalAPI;
				}
		    } else {
                if (log.isDebugEnabled()) {
                    log.debug("You don't have permission to update resources in stage " + stage);
                }
	        }
	   
	    print(data);
    } else {
        throw new Error("No action specified");
    }
}());
%>
