<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
(function () {
    var buildModule, resourcesModule, lifeCycleModule, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");
    var log = new Log("blocks/reposBuilds/add/ajax/add.jag");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }

    if (action == "deployArtifact") {
   	    buildModule = jagg.module("build");
        var response = {};
		var applicationId = request.getParameter("applicationKey");
		var stage = request.getParameter("stage");
		var version = request.getParameter("version");
		var tagName = request.getParameter("tagName");
		var deployAction = request.getParameter("deployAction");
        var deployToStagePermission = PERMISSION_DEPLOY_TO + stage;

        if (jagg.module("permission").isUserAccessGrantedForPlatform(deployToStagePermission)){
            var result =  buildModule.deployArtifact(applicationId, stage, version, tagName, deployAction);
            print(result);
        } else {
            response.result = 0;
            response.message = "You don't have permission to deploy an artifact";
            print(response);
        }
		//var result =  buildModule.deployTaggedArtifact(applicationId, stage, version, tagName);

	} else {
        throw new Error("Invalid action specified");
    }
}());
%>