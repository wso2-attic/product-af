<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log();
(function () {
    var mod, obj, result,

    site = require("/site/conf/site.json");
    action = request.getParameter("action");
 	var modPermission = jagg.module("permission");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if (action === "isDevOp") {
        var response = {};
        mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        var userName = request.getParameter("userName");
        if (modPermission.checkUserActionPermission(appKey,PERMISSION_USER_INVITE)){
            try {
                var users = parse(mod.getAppUsersWithRoles(appKey));
                for (var index in users) {
                    var entry = users[index];
                    var roles = entry.roles;
                    if(entry.userName == userName && roles.indexOf("devops") !== -1){
                        print(true);
                        return;
                    }
                }
            } catch(e) {
                throw "Error while checking the logged in user for devops role of the appKey "+ appKey;
            }
            print(false);
        } else {
            response.result = 0;
            response.message = "You don't have Dev Ops permission";
            print(response);
        }

    }else if (action === "getAppOwner") {
       mod = jagg.module("application");
       var appKey=request.getParameter("applicationKey");
       try {
    	  var users = parse(mod.getAppUsersWithRoles(appKey));
     	  for (var index in users) {
           	var entry = users[index];
           	var roles = entry.roles;
              	if(roles.indexOf("appowner") !== -1){
	            	print(entry.userName);
	            	return;
              	}
          }
       } catch(e) {
           throw "Error while retrieving the appowner of the appKey "+ appKey;
       }
   }else if (action === "getAppUsersWithRoles") {
         mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        try {
            print(mod.getAppUsersWithRoles(appKey));
        } catch(e) {
            throw "Error while retrieving users of application";
        }
    }else if (action === "getAppUsersByRoles") {
         mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        try {
            print(mod.getAppUsersByRoles(appKey));
        } catch(e) {
            throw "Error while retrieving users of application";
        }
    }else if (action === "getUserInfo") {
        var appliKey=request.getParameter("applicationKey");
        try {
            result = getUsersInfoOfApplication(appliKey);
            if( result !== null) {
                return result;
            } else {
                throw "Error while retrieving user infomation";
            }
        } catch(e) {
        throw "Error while retrieving users infomation";
        }
    }else if(action === 'getUserConfirmationObject') {
    	mod = jagg.module("user");
    	var confirmation = request.getParameter("confirmation");
    	
    	try {
            return mod.getUserConfirmationObject(confirmation);
        } catch(e) {
            throw "Error while getting application of user";
        }
    }else if(action === 'getRepositoryPath') {
    	var applicationKey = request.getParameter("applicationKey");
    	
    	var path = APPLICATIONS + applicationKey;
        if(resourceExists(path)) {
            return getResource(path).getProperty(APPLICATION_REPO_LINK);
        }
    }else if(action === 'getUserAccess') {
    	mod = jagg.module("application");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var userName = request.getParameter("userName");
    	
    	mod.getUserAccess(applicationKey, userName);
    }else if(action === "validateUser") {
    	mod = jagg.module("user");
    	var userName = request.getParameter("userName");
    	var result = false;

    	try {
            result = mod.validateUser(userName);
        } catch(e) {
            throw "Error while validating the user email address" +e ;
        }

        print(result);
    }
    else if(action==="getAllUsersHavingName"){
    	mod = jagg.module("user");
        var response = {};
       // if (modPermission.isUserAccessGrantedForPlatform(PERMISSION_USER_INVITE)){
            var userName = request.getParameter("userName");
            var result = false ;
            try {
                result = mod.getAllUsersHavingName(userName);
            } catch(e) {
                throw "Error while searching the users";
            }
            print(result);
       // } else {
         //   response.result = 0;
         //   response.message = "You don't have permission to get the user list";
         //   print(response);
       // }
    }else if (action === "getUsersOfApplication") {
        mod = jagg.module("application");
        var appKey=request.getParameter("applicationKey");
        var response = {};
        if (modPermission.isUserAccessGranted(appKey, PERMISSION_APPLICATION_MEMBER)){
            try {
                print(mod.getUsersOfApplication(appKey));
            } catch(e) {
                throw "Error while retrieving users of application";
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to get the users of application";
            print(response);
        }

    } else if (action === "getApplicationsCreatedByUser") {
        mod = jagg.module("application");
        var user = request.getParameter("userName");
        var response = {};
        if (modPermission.hasTenantLevelUserMgtPermission()) {
            try {
                print(mod.getApplicationsCreatedByUser(user));
            } catch (e) {
                log.error("Error while retrieving applications created by user");
                log.error(e);
                throw "Error while retrieving applications created by user : " + user;
            }
        } else {
            response.result = 0;
            response.message = "You don't have permission to get the application created by user : " + user;
            print(response);
        }
    }
    else {

    	throw new Error("No action specified");
    }
}());
%>
