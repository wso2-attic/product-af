<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

    include("/jagg/jagg.jag");
    include("/jagg/constants.jag");
    include("/jagg/config_reader.jag");
    (function()
    {
        var mod, obj, result,
                action = request.getParameter("action"),
                site = require("/site/conf/site.json");
        var log = new Log();
        if (!jagg.getUser()) {
            print(UNAUTHORIZED_ERROR_RESPONSE);
            return;
        }
        if (action == "getTagNamesOfPersistedArtifacts") {
            mod = jagg.module("build");
            var applicationKey = request.getParameter("applicationKey");
            var applicationVersion = request.getParameter("applicationVersion");
            var tags = mod.getTagNamesOfPersistedArtifacts(applicationKey, applicationVersion);
            var tagNames = new Array();
            for (var index in
            tags){
                var user = tags[index];
                tagNames.push(user);
            }
            print(tagNames);
        } else if (action == "printBuildLogs") {
            mod = jagg.module("build");
            //var userName = request.getParameter("userName");
            var applicationKey = request.getParameter("applicationKey");
            var applicationVersion = request.getParameter("applicationVersion");
            //var lastBuildNo = request.getParameter("lastBuildNo");

            var builderBaseUrl = getProperty(BASE_URL);
            var tenantDomain = request.getParameter("tenantDomain");
            var buildLogUrl = builderBaseUrl + "/jobs/" + tenantDomain + "/jobs/" + applicationKey + "-"
                    + applicationVersion + "-default/1/logText/progressiveHtml?start=0";
            //var buildLogUrl = builderBaseUrl + "/t/" + tenantDomain +  "/webapps/jenkins/job/" + applicationKey + "-"
            //      + applicationVersion + "-default/1/logText/progressiveHtml?start=0";
            var userName = getProperty(JENKINS_ADMIN_USERNAME);
            var password = getProperty(JENKINS_ADMIN_PASSWORD);

            var Base64 = {
                _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                encode: function (e) {
                    var t = "";
                    var n, r, i, s, o, u, a;
                    var f = 0;
                    e = Base64._utf8_encode(e);
                    while (f < e.length) {
                        n = e.charCodeAt(f++);
                        r = e.charCodeAt(f++);
                        i = e.charCodeAt(f++);
                        s = n >> 2;
                        o = (n & 3) << 4 | r >> 4;
                        u = (r & 15) << 2 | i >> 6;
                        a = i & 63;
                        if (isNaN(r)) {
                            u = a = 64
                        } else if (isNaN(i)) {
                            a = 64
                        }
                        t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)
                    }
                    return t
                },
                decode: function (e) {
                    var t = "";
                    var n, r, i;
                    var s, o, u, a;
                    var f = 0;
                    e = e.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                    while (f < e.length) {
                        s = this._keyStr.indexOf(e.charAt(f++));
                        o = this._keyStr.indexOf(e.charAt(f++));
                        u = this._keyStr.indexOf(e.charAt(f++));
                        a = this._keyStr.indexOf(e.charAt(f++));
                        n = s << 2 | o >> 4;
                        r = (o & 15) << 4 | u >> 2;
                        i = (u & 3) << 6 | a;
                        t = t + String.fromCharCode(n);
                        if (u != 64) {
                            t = t + String.fromCharCode(r)
                        }
                        if (a != 64) {
                            t = t + String.fromCharCode(i)
                        }
                    }
                    t = Base64._utf8_decode(t);
                    return t
                },
                _utf8_encode: function (e) {
                    e = e.replace(/\r\n/g, "\n");
                    var t = "";
                    for (var n = 0; n < e.length; n++) {
                        var r = e.charCodeAt(n);
                        if (r < 128) {
                            t += String.fromCharCode(r)
                        } else if (r > 127 && r < 2048) {
                            t += String.fromCharCode(r >> 6 | 192);
                            t += String.fromCharCode(r & 63 | 128)
                        } else {
                            t += String.fromCharCode(r >> 12 | 224);
                            t += String.fromCharCode(r >> 6 & 63 | 128);
                            t += String.fromCharCode(r & 63 | 128)
                        }
                    }
                    return t
                },
                _utf8_decode: function (e) {
                    var t = "";
                    var n = 0;
                    var r = c1 = c2 = 0;
                    while (n < e.length) {
                        r = e.charCodeAt(n);
                        if (r < 128) {
                            t += String.fromCharCode(r);
                            n++
                        } else if (r > 191 && r < 224) {
                            c2 = e.charCodeAt(n + 1);
                            t += String.fromCharCode((r & 31) << 6 | c2 & 63);
                            n += 2
                        } else {
                            c2 = e.charCodeAt(n + 1);
                            c3 = e.charCodeAt(n + 2);
                            t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                            n += 3
                        }
                    }
                    return t
                }
            }

            var encodedString = Base64.encode(userName+":"+password);
            var headers = {"Authorization": " Basic " + encodedString};
            var test = get(buildLogUrl, {},headers,"text/html");
            print(test.data);
        }
        else if (action == "getBuildLogsUrl") {
            mod = jagg.module("build");
            var userName = request.getParameter("userName");		
            var applicationKey = request.getParameter("applicationKey");
            var applicationVersion = request.getParameter("applicationVersion");
            var lastBuildNo = request.getParameter("lastBuildNo");
            
            var builderBaseUrl = getProperty(BASE_URL);
            var tenantDomain = userName.split("@")[1];
            var buildLogUrl = builderBaseUrl + "/t/" + tenantDomain +  "/webapps/jenkins/job/" + applicationKey + "-" + applicationVersion + "-default/" + lastBuildNo + "/consoleText";
            print(buildLogUrl);
        } else {
            throw new Error("Invalid action specified");
        }
    }
    ()
    )
    ;
%>
