<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
jagg.block("tablinks", {
    initialize:function (data) {
    },
    getInputs:function () {
    },
    getOutputs:function (inputs) {
        var userName = jagg.getUser();
    	var dashboardUrl = "";
	    var cloudMgtUrl = "";
    	var dashboardPath = "";
    	var serverUrl = getProperty(DASHBOARD_SERVER_URL);
    	var carbon = require('carbon');
    	var server = carbon.server;
    	var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
    	var tenantDomain = null;

        //Tablink permissions
    	var permissionModule = jagg.module("permission");
        var applicationMod = jagg.module("application");
        var manager = jagg.module("manager");
        var tablinksModule = jagg.module("tablinks");
    	var tenantID = null;
    	var hasTenantLevelUserMgtPermission = null;
    	var isOTtenant = false;
    	var hasCXOPermission = null;

    	var applicationType = false;
    	var isUploadableAppType = false;

    	var isOtherServicesTabAvailable = getProperty(SHOW_OTHER_SERVICES_TAB);

    	var log = new Log();
    	var applicationInfo;
        var allowedTablinks = {};

    	if(userName){

    		if(!inputs.applicationKey){
    			tenantDomain = manager.getTenantDomain();
    			tenantID = realmService.getTenantManager().getTenantId(tenantDomain);
    			hasTenantLevelUserMgtPermission = permissionModule.hasTenantLevelUserMgtPermission();
    			if(session.get(TENANT_INFO)){
    			    isOTtenant = session.get(TENANT_INFO).isOTTenant;
    			}
    			hasCXOPermission = permissionModule.isUserAccessGrantedForPlatform(PERMISSION_CXO_DASHBOARD);
    			dashboardPath = getProperty(TENANT_ADMIN__DASHBOARD_PATH);
    			dashboardUrl = serverUrl + dashboardPath;
			    cloudMgtUrl = getProperty(CLOUDMGT_SERVER_URL);
		
    		}else{

    			var applicationKey = inputs.applicationKey;
                allowedTablinks = tablinksModule.getAllowedTabLinks(applicationKey, userName);

                hasTenantLevelUserMgtPermission = permissionModule.hasTenantLevelUserMgtPermission();
                applicationType = manager.getApplicationType(applicationKey);
    			isUploadableAppType = manager.getApplicationTypeBean(applicationType).isUploadableAppType();

                applicationInfo = applicationMod.getAppVersionsOfUser(applicationKey, userName, false, true, false);
    		}
    	}
        return {
            "userName":userName,
            "isOTtenant":isOTtenant,
            "hasCXOPermission":hasCXOPermission,
            "hasTenantLevelUserMgtPermission":hasTenantLevelUserMgtPermission,
            "dashboardUrl":dashboardUrl,
            "dashboardPath":dashboardPath,
            "applicationType":applicationType,
            "isUploadableAppType":isUploadableAppType,
            "isOtherServicesTabAvailable":isOtherServicesTabAvailable,
            "isOverviewAllowed":allowedTablinks.isOverviewAllowed,
            "isTeamAllowed":allowedTablinks.isTeamAllowed,
            "isReposAndBuildsAllowed":allowedTablinks.isReposAndBuildsAllowed,
            "isResourcesAllowed":allowedTablinks.isResourcesAllowed,
            "isIssuesAllowed":allowedTablinks.isIssuesAllowed,
            "isLifecylceAllowed":allowedTablinks.isLifecylceAllowed,
            "isLogsAllowed":allowedTablinks.isLogsAllowed,
            "isAllowDomainMapping":allowedTablinks.isAllowDomainMapping,
            "isSettingsAllowed":allowedTablinks.isSettingsAllowed,
            "applicationInfo":applicationInfo
        };
    }
});
%>
