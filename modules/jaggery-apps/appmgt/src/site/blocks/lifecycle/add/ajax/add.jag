<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.GovernanceEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;
var stratosRestClient = Packages.org.wso2.carbon.appfactory.s4.integration.StratosRestClient;
var commonUtil = Packages.org.wso2.carbon.appfactory.core.util.CommonUtil;
var log = new Log();
(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");

    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    var modPermission = jagg.module("permission");
    if(request.getParameter("stageName") != null){
        session.put('stage',request.getParameter("stageName"));
    }
    if(action == "updateSessionInfo"){
        //We do nothing here. But when we send the stage as a parameter for this, the above if condition will get hit
        //And it will update the session with the correct info.
        //Therefore don't remove this method
    }  else if(action == "Promote" || action == "Demote" || action == "Retire") {
        mod = jagg.module("lifecycle");
        var manager = jagg.module("manager");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var tagName = request.getParameter("tagName");
        var comment = request.getParameter("comment");
        var userName = request.getParameter("userName");

        var applicationModule = jagg.module("application");
        var currentStage = applicationModule.getStage(applicationKey,version);

        var result = {};
        var nextStage = mod.getNextLifeCycleStage(stageName,applicationKey);
        var previousStage = mod.getPreviousLifeCycleStage(stageName,applicationKey);
        var permissionPromoteToNextStage,permissionDemoteToNextStage;
        var isAuthorizeToPromote = false;
        var isAuthorizeToDemote = false;

        if(nextStage != null && nextStage != undefined) {
            permissionPromoteToNextStage = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStage;
            isAuthorizeToPromote = modPermission.isUserAccessGrantedForPlatform(permissionPromoteToNextStage);
        }
        if(previousStage != null || previousStage != undefined){
            permissionDemoteToNextStage = PERMISSION_GOVERNANCE_DEMOTE_TO + previousStage;
            isAuthorizeToDemote = modPermission.isUserAccessGrantedForPlatform(permissionDemoteToNextStage);
        }

        if (isAuthorizeToPromote || isAuthorizeToDemote) {
            var buildInfo = JSON.parse(applicationModule.getBuildandDelpoyedStatus(applicationKey, version));
            if (!(buildInfo != null && buildInfo != undefined && buildInfo.buildStatus == SUCCESSFUL)) {
                result.error = true;
                result.message = "Cannot promote/demote because no successful build is available!";
                print(result);
                return;
            }

            if ( currentStage != stageName){
                // check whether current stage and the stage user saw is the same.
                throw new Error("Unable to complete the governance operation. Application stage is already changed to : " +
                        currentStage);
            }

            var stratosServerUrl = getProperty("Stratos" + "." + "TenantMgtUrl");
            var tenantId = manager.getTenantId();
            var stratosApplicationId;
            if(action == "Demote"){
                //delete current stage stratos app
                var buildModule = jagg.module("build");
                buildModule.deployArtifact(applicationKey, previousStage, version, tagName, PROMOTE);
            }
            var applicationType = manager.getApplicationType(applicationKey);
            var applicationTypeBean = manager.getApplicationTypeBean(applicationType);

            var runtimeNameForAppType = applicationTypeBean.getRuntimes()[0];
            var isSubscribeOndeployment = manager.getRuntimeBean(runtimeNameForAppType).getSubscribeOnDeployment();

            // Deleting this stage pod if it's a single tenant application
            if(isSubscribeOndeployment){
                stratosApplicationId = commonUtil.generateUniqueStratosApplicationId(tenantId, applicationKey, version,
                        currentStage)
                try{
                    stratosRestClient.getInstance(stratosServerUrl,userName).undeployAndDeleteApplication(stratosApplicationId)
                }catch (e) {
                    var errorMsg = "Failed to delete stratos application for action : " + action;
                    log.error(errorMsg);
                    log.error(e);
                    response.status = 500;
                    response.content = errorMsg;
                }
            }

            var revision = '0';
            var build = 'true';
            var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;
            var promoteDepPolicy = getProperty('ApplicationDeployment.DeploymentStage.'+stageName+'.Promote.DeploymentPolicy');
            var deployAction;
            if(TAGGED == promoteDepPolicy || LATEST == promoteDepPolicy) {
                deployAction = PROMOTE;
            } else if (PROMOTED == promoteDepPolicy) {
                deployAction = "rePromote";
            }

            var tenantDomain = modManager.getTenantDomain();
            var isUploadableAppType = applicationTypeBean.isUploadableAppType();
            var aspect = mod.getCurrentLifecycle(applicationKey,tenantDomain).lifecycleName;

            permissionMod = jagg.module("permission");
            var user = permissionMod.checkUserAuthenticated();

            var parameters = new Array();
            parameters[0] = 'version';
            parameters[1] = version;
            parameters[2] = 'applicationId';
            parameters[3] = applicationKey;
            parameters[4] = 'revision';
            parameters[5] = 'HEAD';
            parameters[6] = 'stage';
            parameters[7] = stageName;
            parameters[8] = 'build';
            parameters[9] = 'true';
            parameters[10] = 'autodeployment';
            parameters[11] = 'false';
            parameters[12] = 'action';
            parameters[13] = action;
            parameters[14] = 'user';
            parameters[15] = user;
            if(comment){
                parameters[16] = 'comment';
                parameters[17] = comment;
            }

            try {
                var lifeCycleCheckListItems = parse(request.getParameter("checkItems"));
                var deployedArtifact = mod.invokeGovernanceProcess(action, stageName, applicationKey, revision, version,
                        build, path, aspect, deployAction, lifeCycleCheckListItems, parameters, tagName, userName);

                log.debug(applicationKey + " was successfully invoked " + action + " action");
                result.error = false;
                result.message = action + " action was successful.";
                print(result);
            } catch (e) {
                var errorMsg = "Failed to complete "+action +" action.";
                log.error(errorMsg);
                log.error(e);
                response.status = 500;
                response.content = errorMsg;
            }
        }  else {
            result.result = 0;
            result.message = "You don't have permission to perform the life cycle operation";
            print(result);
        }


    } else if ( action == "deployAndUpdatePromoteStatus"){
        var applicationId = request.getParameter("applicationKey");
        var stage = request.getParameter("stage");
        var version = request.getParameter("version");
        var tagName = request.getParameter("tagName");
        var deployAction = request.getParameter("deployAction");
        var deployToStagePermission = PERMISSION_DEPLOY_TO + stage;
        if (jagg.module("permission").isUserAccessGrantedForPlatform(deployToStagePermission)){
            copyNewDependenciesAndDeployArtifact(applicationId, stage, version, tagName, deployAction);
            updatePromoteStatus(applicationId,  version, stage, PROMOTED_STATUS_SUCCESS );
        } else {
            var response={};
            response.result = 0;
            response.message = "You don't have permission to deploy an artifact";
            print(response);
        }
    } else if ( action == "copyNewDependenciesAndDeployArtifact"){
        var applicationId = request.getParameter("applicationKey");
        var stage = request.getParameter("stage");
        var version = request.getParameter("version");
        var tagName = request.getParameter("tagName");
        var deployAction = request.getParameter("deployAction");
        var deployToStagePermission = PERMISSION_DEPLOY_TO + stage;
        if (jagg.module("permission").isUserAccessGrantedForPlatform(deployToStagePermission)){
            var result = copyNewDependenciesAndDeployArtifact(applicationId, stage, version, tagName, deployAction);
            print(result);
        } else {
            var response={};
            response.result = 0;
            response.message = "You don't have permission to deploy an artifact";
            print(response);
        }
    }  else if ( action == "invokeUpdateLifeCycleCheckList"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;

        var manager = jagg.module("manager");
        var applicationType = manager.getApplicationType(applicationKey);
        var isUploadableAppType = manager.getApplicationTypeBean(applicationType).isUploadableAppType();
        var tenantDomain = modManager.getTenantDomain();
        var aspect = mod.getCurrentLifecycle(applicationKey,tenantDomain).lifecycleName;

        var nextStageName = mod.getNextLifeCycleStage(stageName,applicationKey);
        var permissionStageToPromote = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStageName;
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToPromote)){
            try {
                var checkListItemsValues = parse(request.getParameter("checkItems"));
                var parameters = new Array();
                var deployedArtifact = mod.invokeAspectWithParameter(path, aspect, "itemClick", checkListItemsValues,
                        parameters,stageName);
                response.error = false;
                print(response);
            } catch (e) {
                throw new Error(e.message);
            }
        } else{
            response.error = true;
            response.message = "You don't have permission to update lifecycle checklist";
            print(response);
        }

    }else if ( action == "itemChecked"){
        print("true");
        var appKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var itemName = request.getParameter("itemName");
        var checked = request.getParameter("checked");
        var loggedInUser = jagg.getUser();

        try {
            var notificationTitle = itemName.split("*")[0] + " by " + loggedInUser.split("@")[0] + " for " + stageName + " stage in version " + version;
            var eventBuilderInstance = EventBuilder.lifecycleItemCheckedEvent(appKey, loggedInUser, notificationTitle, "", "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending item checked notification \n" + e.message);
        }

    } else if (action == "getAppVersionsInStagesWithLifeCycleInfo"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var userName = request.getParameter("userName");
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try{
                print(mod.getAppVersionsInStagesWithLifeCycleInfo(applicationKey,userName));
            }catch(e){
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to life cyclec info of application versions";
            print(response);
        }

    } else if (action == "getCheckListItemsOfAppVersion") {
        mod = jagg.module("lifecycle");
        var modPermission = jagg.module("permission");
        var applicationKey = request.getParameter("applicationKey");
        var version = request.getParameter("version");
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)) {
            print(mod.getCheckListItemsOfAppVersion(applicationKey, version));
        } else {
            response.error = true;
            response.message = "You don't have permission to get life cycle info of application versions";
            print(response);
        }
    } else if(action == "uploadNewVersionOfExistingApp"){
    	var applicationMod = jagg.module("application");
    	var lifecycleMod = jagg.module("lifecycle");

    	var existingVersion = request.getParameter("latestVersion");//existing latest version
    	var major=Number(existingVersion.split(".")[0]);
    	var newMajor=++major;
	    var newVersion=newMajor+".0.0";

	    applicationKey = request.getParameter("applicationKey");
    	var userName = request.getParameter("userName");
    	var srcVersion = "trunk";
        var targetVersion = newVersion;

    	var file = request.getFile("uploaded_application");

    	try {
			var mod = jagg.module("manager");
            var applicationType = mod.getApplicationType(applicationKey);

    		applicationMod.stroreUploadedApplication(applicationKey , targetVersion , file, applicationType);
			lifecycleMod.invokeDoVersion(applicationKey, srcVersion, targetVersion);

	    } catch (e) {
	    	log.error(e.message);
		    throw e.message;
	    }


    }
    else if(action == "getDisplayLifecycles"){
        var lifecycleMod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        try {
            var lifecycleList = lifecycleMod.getDisplayLifecycles(applicationKey);
            print(lifecycleList);
        } catch (e) {
            log.error(e.message);
            throw e.message;
        }
    }else if(action == "changeLifecycle"){
        var lifecycleMod = jagg.module("lifecycle");
        try {
            var applicationKey = request.getParameter("applicationKey");
            var lifecycleName = request.getParameter("lifecycleName");
            var tenantDomain = modManager.getTenantDomain();
            var response = lifecycleMod.changeLifecycle(applicationKey,lifecycleName,tenantDomain);
            print(response);
        } catch (e) {
            log.error(e.message);
            throw e.message;
        }
    }else if(action == "getCurrentLifecycleDsiplayName") {
        var lifecycleMod = jagg.module("lifecycle");
        var manager = jagg.module("manager");
        try {
            var applicationKey = request.getParameter("applicationKey");
            var tenantDomain = modManager.getTenantDomain();
            var response = lifecycleMod.getCurrentLifecycle(applicationKey, tenantDomain).displayName;
            print(response);
        } catch (e) {
            log.error(e.message);
            throw e.message;
        }
    }else if(action == "showLifecycleChangeTab") {
        var lifecycleMod = jagg.module("lifecycle");
        var manager = jagg.module("manager");
        try {
            var applicationKey = request.getParameter("applicationKey");
            var response = lifecycleMod.isLifecycleChangeValid(applicationKey);
            print(response);
        } catch (e) {
            log.error(e.message);
            throw e.message;
        }
    }
    else {
        log.error("No action specified");
    }
}());

function updatePromoteStatus(applicationKey, version, nextStage, state){
    var mod = jagg.module("application");
    try{
        mod.updatePromoteStatus(applicationKey, nextStage, version, state);
    }catch(e){
        var err = "Error while updating PromoteStatus of the application : "+ applicationKey
                + ", version : " +version +", for stage : " + nextStage;
        log.error(err);
        log.error(e);
        throw (err)
    }
}

function copyNewDependenciesAndDeployArtifact(applicationId, stage, version, tagName, deployAction){
    var buildModule = jagg.module("build");
    var resourcesModule = jagg.module("resources");
    var lifeCycleModule = jagg.module("lifecycle");
    try{
        if (! lifeCycleModule.isInitialLifeCycleStage(stage,applicationId)){
            var sourceStage = lifeCycleModule.getPreviousLifeCycleStage(stage,applicationId);
            resourcesModule.copyNewProperties(applicationId, sourceStage, stage);
            resourcesModule.copyNewDataSources(applicationId, sourceStage, stage);
        }
    }catch(e){
        var err = "Error while updating deploying artifact of the application : "+ applicationId
                        + ", version : " +version +", for stage : " + stage+", deployAction : "+deployAction;
        log.error(e);
        log.error(err);
        throw ("Error , Resource creation fail");
    }
    return  buildModule.deployArtifact(applicationId, stage, version, tagName, deployAction);
}

%>
