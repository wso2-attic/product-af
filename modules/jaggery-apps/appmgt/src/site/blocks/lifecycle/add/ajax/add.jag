<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.GovernanceEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;
(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");

 	var log = new Log();
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    var modPermission = jagg.module("permission");
    if(request.getParameter("stageName") != null){
        session.put('stage',request.getParameter("stageName"));
    }
    if(action == "updateSessionInfo"){
        //We do nothing here. But when we send the stage as a parameter for this, the above if condition will get hit
        //And it will update the session with the correct info.
        //Therefore don't remove this method
    } else if(action == "directdeploy") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var build = request.getParameter("build");

        var revision = "HEAD";
        var isDirectlyDeploy = getProperty('ApplicationDeployment.DeploymentStage.' + stageName + '.AllowDirectDeploy');
        var permissionStageToDeploy = PERMISSION_DEPLOY_TO + stageName;

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToDeploy)){
            if (isDirectlyDeploy == "true"){
                try{
                    mod.invokeDeployToStage(applicationKey,revision,version,stageName,build);
                } catch(e) {
                    throw new Error(e.message);
                }
            } else {
                log.debug("Artifact is not configured for direct deploy");
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to deploy";
            print(response);
        }
	    
    } else if(action == "Promote" || action == "Demote" || action == "Retire") {
		mod = jagg.module("lifecycle");
		var manager = jagg.module("manager");
		var applicationKey = request.getParameter("applicationKey");
    	var stageName = request.getParameter("stageName");
    	var version = request.getParameter("version");
		var tagName = request.getParameter("tagName");
		var comment = request.getParameter("comment");
		var userName = request.getParameter("userName");

	    var applicationModule = jagg.module("application");
		var currentStage = applicationModule.getStage(applicationKey,version);

        var result = {};
        var nextStage = mod.getNextLifeCycleStage(stageName);
        var previousStage = mod.getPreviousLifeCycleStage(stageName);
        var permissionPromoteToNextStage,permissionDemoteToNextStage;
        var isAuthorizeToPromote = false;
        var isAuthorizeToDemote = false;

        if(nextStage != null && nextStage != undefined) {
           permissionPromoteToNextStage = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStage;
            isAuthorizeToPromote = modPermission.isUserAccessGrantedForPlatform(permissionPromoteToNextStage);
        }
        if(previousStage != null || previousStage != undefined){
            permissionDemoteToNextStage = PERMISSION_GOVERNANCE_DEMOTE_TO + previousStage;
            isAuthorizeToDemote = modPermission.isUserAccessGrantedForPlatform(permissionDemoteToNextStage);
        }

        if (isAuthorizeToPromote || isAuthorizeToDemote) {
            var buildInfo = JSON.parse(applicationModule.getBuildandDelpoyedStatus(applicationKey, version));
            if (!(buildInfo != null && buildInfo != undefined && buildInfo.buildStatus == SUCCESSFUL)) {
                result.error = true;
                result.message = "Cannot promote/demote because no successful build is available!";
                print(result);
                return;
            }
        	
        	
            if ( currentStage != stageName){
                // check whether current stage and the stage user saw is the same.
                throw new Error("Unable to complete the governance operation. Application stage is already changed to : " +
                        currentStage);
            }

            var revision = '0';
            var build = 'true';
            var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;
            var aspect = LIFE_CYCLE_NAME;
            var promoteDepPolicy = getProperty('ApplicationDeployment.DeploymentStage.'+stageName+'.Promote.DeploymentPolicy');
            var deployAction;
            if(TAGGED == promoteDepPolicy || LATEST == promoteDepPolicy) {
                deployAction = PROMOTE;
            } else if (PROMOTED == promoteDepPolicy) {
                deployAction = "rePromote";
            }

			var applicationType = manager.getApplicationType(applicationKey);
			var isUploadableAppType = manager.getApplicationTypeBean(applicationType).isUploadableAppType();
			var aspect;
			if(isUploadableAppType){
				aspect = UPLOADABLE_APPLICATION_LIFE_CYCLE_NAME;
			} else {
				aspect = LIFE_CYCLE_NAME;
			}

            permissionMod = jagg.module("permission");
            var user = permissionMod.checkUserAuthenticated();

            var parameters = new Array();
            parameters[0] = 'version';
            parameters[1] = version;
            parameters[2] = 'applicationId';
            parameters[3] = applicationKey;
            parameters[4] = 'revision';
            parameters[5] = 'HEAD';
            parameters[6] = 'stage';
            parameters[7] = stageName;
            parameters[8] = 'build';
            parameters[9] = 'true';
            parameters[10] = 'autodeployment';
            parameters[11] = 'false';
            parameters[12] = 'action';
            parameters[13] = action;
            parameters[14] = 'user';
            parameters[15] = user;
            if(comment){
                parameters[16] = 'comment';
                parameters[17] = comment;
            }

            try {
                var lifeCycleCheckListItems = parse(request.getParameter("checkItems"));
                var deployedArtifact = mod.invokeGovernanceProcess(action, stageName, applicationKey, revision, version,
                        build, path, aspect, deployAction, lifeCycleCheckListItems, parameters, tagName, userName);

                log.debug(applicationKey + " was successfully invoked " + action + " action");
                result.error = false;
                result.message = action + " action was successful.";
        		print(result);
            } catch (e) {
                var errorMsg = "Failed to complete "+action +" action.";
                log.error(errorMsg);
                log.error(e);
                response.status = 500;
                response.content = errorMsg;
            }
        }  else {
            result.result = 0;
            result.message = "You don't have permission to perform the life cycle operation";
            print(result);
        }
	    

	} else if ( action == "copyNewDependenciesAndDeployArtifact"){

        ////COPY THE NEW RESOURCES.

        buildModule = jagg.module("build");
        resourcesModule = jagg.module("resources");
        lifeCycleModule = jagg.module("lifecycle");

      	var applicationId = request.getParameter("applicationKey");
      	var stage = request.getParameter("stage");
      	var version = request.getParameter("version");
      	var tagName = request.getParameter("tagName");
      	var deployAction = request.getParameter("deployAction");
        var deployToStagePermission = PERMISSION_DEPLOY_TO + stage;
      	if (jagg.module("permission").isUserAccessGrantedForPlatform(deployToStagePermission)){
      		try{
      			if (! lifeCycleModule.isInitialLifeCycleStage(stage)){
      				var sourceStage = lifeCycleModule.getPreviousLifeCycleStage(stage);
      				resourcesModule.copyNewProperties(applicationId, sourceStage, stage);
      				resourcesModule.copyNewDataSources(applicationId, sourceStage, stage);
      			}
      		}catch(exx){
      			throw new Error("Error , Resource creation fail, " + exx);
      		}
      	    var result =  buildModule.deployArtifact(applicationId, stage, version, tagName, deployAction);
      		print(result);
      	}else {
            var response={};
            response.result = 0;
            response.message = "You don't have permission to deploy an artifact";
            print(response);
        }

    } else if(action == "invokeDoVersion") {
    	mod = jagg.module("lifecycle");

    	var applicationKey = request.getParameter("applicationKey");
        var srcVersion = request.getParameter("srcVersion");
        var targetVersion = request.getParameter("targetVersion");
        var lifecycleName = request.getParameter("lifecycleName");

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_REPOSITORY_BRANCH)){
            try {
                return mod.invokeDoVersion(applicationKey, srcVersion, targetVersion, lifecycleName);
            } catch (e) {
                log.error(e.message);
                throw e.message;
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create a version";
            print(response);
        }

    } else if (action == "createArtifact") {
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var version = request.getParameter("version");
        var revision = request.getParameter("revision");
        var stage = request.getParameter("stage");
        var doDeploy = request.getParameter("doDeploy");
        var tagName = request.getParameter("tagName");
        var repoFrom = request.getParameter("repoFrom");
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try {
                return mod.invokeCreateArtifact(applicationKey, version, revision, stage, doDeploy, tagName,repoFrom);
            } catch (e) {
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create  artifacts";
            print(response);
        }

    } else if ( action == "invokeUpdateLifeCycleCheckList"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;

		var manager = jagg.module("manager");
		var applicationType = manager.getApplicationType(applicationKey);
		var isUploadableAppType = manager.getApplicationTypeBean(applicationType).isUploadableAppType();
		var aspect;
		if(isUploadableAppType){
			aspect = UPLOADABLE_APPLICATION_LIFE_CYCLE_NAME;
		} else {
			aspect = LIFE_CYCLE_NAME;
		}

		var nextStageName = mod.getNextLifeCycleStage(stageName);
        var permissionStageToPromote = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStageName;
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToPromote)){
            try {
                var checkListItemsValues = parse(request.getParameter("checkItems"));
                var parameters = new Array();
                var deployedArtifact = mod.invokeAspectWithParameter(path, aspect, "itemClick", checkListItemsValues,
                        parameters,stageName);
            } catch (e) {
                throw new Error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create application repository";
            print(response);
        }

    }else if ( action == "itemChecked"){
        print("true");
        var appKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var itemName = request.getParameter("itemName");
        var checked = request.getParameter("checked");
        var loggedInUser = jagg.getUser();

        try {
            var notificationTitle = itemName.split("*")[0] + " by " + loggedInUser.split("@")[0] + " for " + stageName + " stage in version " + version;
            var eventBuilderInstance = EventBuilder.lifecycleItemCheckedEvent(appKey, loggedInUser, notificationTitle, "", "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending item checked notification \n" + e.message);
        }

    } else if (action == "getAppVersionsInStagesWithLifeCycleInfo"){
       mod = jagg.module("lifecycle");
       var applicationKey = request.getParameter("applicationKey");
       var userName = request.getParameter("userName");
       var response = {};
       if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try{
                print(mod.getAppVersionsInStagesWithLifeCycleInfo(applicationKey,userName));
            }catch(e){
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to life cyclec info of application versions";
            print(response);
        }


    } else if(action == "uploadNewVersionOfExistingApp"){
    	var applicationMod = jagg.module("application");
    	var lifecycleMod = jagg.module("lifecycle");
    	
    	var existingVersion = request.getParameter("latestVersion");//existing latest version
    	var major=Number(existingVersion.split(".")[0]);
    	var newMajor=++major;
	    var newVersion=newMajor+".0.0";
        var lifecycleName = request.getParameter("lifecycleName");

	    applicationKey = request.getParameter("applicationKey");
    	var userName = request.getParameter("userName");
    	var srcVersion = "trunk";
        var targetVersion = newVersion;
       
    	var file = request.getFile("uploaded_application");    	 

    	try {
			var mod = jagg.module("manager");
            var applicationType = mod.getApplicationType(applicationKey);

    		applicationMod.stroreUploadedApplication(applicationKey + "-" + targetVersion , file, applicationType);
			lifecycleMod.invokeDoVersion(applicationKey, srcVersion, targetVersion, lifecycleName);

	    } catch (e) {
	    	log.error(e.message);
		    throw e.message;
	    }
    	
    	
    }else {
		log.error("No action specified");
	}
}());

%>
