<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include('/jagg/constants.jag');
include('/jagg/util.jag');
include('/jagg/config_reader.jag');
jagg.block("governance/list", {
    initialize: function (data) {

    },
    getInputs: function () {
        return {
            "applicationKey": null
        }
    },

    getOutputs: function (inputs) {
        var log = new Log();
	    var applicationKey = request.getParameter("applicationKey");
        var permissionModule = jagg.module("permission");
        var lifecycleModule = jagg.module("lifecycle");
        var mod = jagg.module("manager");
        var applicationMod = jagg.module("application");
        var deploymentStages = lifecycleModule.getStages(applicationKey);
                //getProperties(DEPLOYMENT_STAGES);
        var hasPromotePermissions = {};
        var nextStage = {};
        var previousStage = {};
        var hasDemotePermissions = {};
        var hasVisibilityPermissions = {};
        var userName = jagg.getUser();

        if(userName) {
            for (var i = 0; i < deploymentStages.length; i++) {
                var currentStage = deploymentStages[i];
                var next = lifecycleModule.getNextLifeCycleStage(currentStage,applicationKey);
                var prev = lifecycleModule.getPreviousLifeCycleStage(currentStage,applicationKey);
                nextStage[currentStage] = next;
                //next stage null > final stage
                if (next == null || next == undefined) {
                    next = currentStage;
                }
                hasPromotePermissions[currentStage] = permissionModule.isUserAccessGranted(inputs.applicationKey,
                                                                                           PERMISSION_GOVERNANCE_PROMOTE_TO +
                                                                                           next);
                hasDemotePermissions[currentStage] = permissionModule.isUserAccessGranted(inputs.applicationKey,
                                                                                          PERMISSION_GOVERNANCE_DEMOTE_TO +
                                                                                          prev);
                previousStage[currentStage] = prev;
                hasVisibilityPermissions[currentStage] = permissionModule.isUserAccessGranted(inputs.applicationKey,
                                                                                              PERMISSION_VISIBILITY_STAGE +
                                                                                              deploymentStages[i]);
            }
            var hasRetirePermission = permissionModule.isUserAccessGranted(inputs.applicationKey,
                                                                           PERMISSION_GOVERNANCE_RETIRE);
            var repositoryOperationsAllowed = permissionModule.isUserAccessGranted(inputs.applicationKey,
                                                                                   PERMISSION_REPOSITORY_BRANCH);
            var applicationType = mod.getApplicationType(applicationKey);
            var isUploadableAppType = mod.getApplicationTypeBean(applicationType).isUploadableAppType();

            var selectedVersion = getSelectedVersionFromSession(applicationKey);
            var appInfo = applicationMod.getAppVersionAllInfoByVersion(applicationKey, selectedVersion, userName);

        }
        return {
        	"nextStage": nextStage,
            "previousStage": previousStage,
            "hasPromotePermissions": hasPromotePermissions,
            "hasDemotePermissions": hasDemotePermissions,
            "hasRetirePermission": hasRetirePermission,
            "hasVisibilityPermissions": hasVisibilityPermissions,
	        "repositoryOperationsAllowed":repositoryOperationsAllowed,
	        "versions":appInfo.versions
        };
    }


});
%>
