<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.template("uploadedAppVersions/list", function (inputs, outputs, jagg) { %>

<%
    var baseURL = getProperty(BASE_URL);
    var gitURL = null;
    var mod = jagg.module("manager");
    var tenantDomain = mod.getTenantDomain();
    var loggedInUser = jagg.getUser();
    var appDomain = getProperty("DomainName");
    var applicationName = request.getParameter("applicationName");
    var applicationKey = request.getParameter("applicationKey");
 %>
    <style>
    .popover_form input.branch-txt-width-fix{
            width:240px;
        }
    #d_clip_button {
        text-align:center;
        border:1px solid black;
        background-color:#ccc;
        margin:10px; padding:10px;
    }
    #d_clip_button.zeroclipboard-is-hover { background-color:#eee; }
    #d_clip_button.zeroclipboard-is-active { background-color:#aaa; }

    </style>

    <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/userActivity.js'))%>"></script>
    
    <script type="text/javascript">

    $(document).ready(function(){
    	initializeUserActivity("uploadVersions", '<%=applicationKey%>', '<%=applicationName%>');
    });

    
    var latestVersion=null;
    var applicaitonType = null;
    var subDomain = null;
    var domainMappedVersion = null;
    function drawVersionsList() {
    	var row = '',
            versions = [],
            element = {},
            count = 0;
        jagg.post("../blocks/reposBuilds/list/ajax/list.jag", {
                action: "getbuildandrepodata",
                buildableforstage:"true",
                metaDataNeed:"false",
                applicationKey: applicationKey,
                userName:userName,
                isRoleBasedPermissionAllowed:"false"
            }, function (result) {

                versions = jQuery.parseJSON(result);
                $("#repositories_and_builds_list").empty();

                count = versions.length;
                $theTable=$('<table class="data-table"><thead><tr><th>Version</th><th>Stage</th><th></th><th></th></tr></thead></table>');

		for (var i = 0; i < count; i++) {
	        element = versions[i];
	        if(element.version.artifactType == "Uploaded-binary-App-war" && element.version.productionMappedDomain != null && element.version.productionMappedDomain != "" ){
	     		   domainMappedVersion = element.version.current;
	   	    }
	        $theTable.append(constructRow(element,i));
        }

		latestVersion=versions[0].version.current;

                	$("#repositories_and_builds_list").append($theTable);
                    $("#repositories_and_builds_list").append($('<div class="clearfix"></div>'));

                    $('.deploy_action').click(function(event){

                        var tmpSrcVersion=$(this).attr('data-version');
                        var tmpstage=$(this).attr('data-stage');
                        doDeploy(applicationKey,"deploy",tmpstage,"",tmpSrcVersion,$(this));
                    });

                    $('.launch_action').click(function(event){
                        var tmpAppType=$(this).attr('data-type');
                        var tmpSrcVersion=$(this).attr('data-version');
                        var tmpstage=$(this).attr('data-stage');
                        var state="started";
                        doLaunch(applicationKey, tmpSrcVersion,tmpstage,state,tmpAppType,$(this));
                    });

                    $('#filter_repos_or_stages').keyup(function(event){
                         doSearch($(this).val());
                    });


                },
        function (jqXHR, textStatus, errorThrown) {

        });
    }

     function loadApplicationInfo(applicationKey){
    jagg.post("../blocks/application/get/ajax/list.jag", {
            action:"getAppInfo",
            applicationKey:applicationKey
        },function (result) {
            var parsedArray = jQuery.parseJSON(result);
            subDomain = parsedArray.mappedSubDomain;
            applicaitonType = parsedArray.type;
        },function (jqXHR, textStatus, errorThrown) {
            //jagg.message({content:'Could not load Application information',type:'error' });

            if (jqXHR.status != 0){
                jagg.message({content:'Could not load Application information',type:'error',id:'myuniqeid' });

            }

        });
     }


    $(function () {
            applicationKey = '<%=request.getParameter("applicationKey")%>';
            userName = '<%=jagg.getUser()%>';
	        loadApplicationInfo(applicationKey);
            drawVersionsList();

	       $('form').ajaxForm({
                        beforeSend: function() {
			     $("#appcreation").attr('disabled','disabled');
			      jagg.message({
                                    content: "New version deployment in-progress.",
                                    type: 'info'
                                 });
                        },
                        complete: function(response) {
				if(response.status === 200){
				   var existingVersion = $("#versionInput").val();//existing latest version
				   var major = Number(existingVersion.split(".")[0]);
		           var newMajor = ++major;
    			   var newVersion = newMajor+".0.0";
    			   $("#appcreation").attr('disabled',false);
				   location.reload();
				}else{
				  jagg.message({
                                    content: "Error while adding new version.",
                                    type: 'Error'
                                 });
                    $("#appcreation").attr('disabled',false);
				}
                         }
                 });

    });

    function uploadNewVersion(){
    	if(validate()){
		$("#versionInput").attr("value",latestVersion);
		$("#versionUploadForm").submit();
	}
	//return false;

    }

    function validate(){
    	if(!$("#uploaded_application").val()){
		   jagg.message({
				    content: "File is not provided to upload.",
				    type: 'error'
			    });
		  return false;
		}
	return true;
    }


    function constructRow(element,i){

        var version=element.version.current;
        var stage=element.version.stage;
        var versionForIds=version.replace(/\./g,'_');

        var $resultRow = '<tr><td>' + version +'</td><td>' + stage + '</td>';
	    if(stage != "Retired"){
	    	$resultRow +='<td><a href="#" class="btn main small deploy_action" data-version="'+version+'" data-stage="'+stage+'">Deploy</a></td>' +
            '<td><a href="#" class="btn main small launch_action" data-version="'+version+'" data-stage="'+stage+'">Launch</a></td>';
	    }else{
	    	$resultRow +='<td></td><td></td>';
	    }
        $resultRow += '</tr>';
        return $resultRow;
    }

    function doCreateBranch(applicationKey,srcVersion,targetVersion,button){
        if(validateBranch(targetVersion)){
            $(button).attr('disabled','disabled').val('Creating..');
            jagg.post("../blocks/lifecycle/add/ajax/add.jag", {
                        action: "invokeDoVersion",
                        applicationKey: applicationKey,
                        srcVersion:srcVersion,
                        targetVersion:targetVersion,
                        lifecycleName:'<%=UPLOADABLE_APPLICATION_LIFE_CYCLE_NAME%>'
                    }, function (result) {
                        $(button).removeAttr('disabled').val('Create Branch');
                        //drawVersionsList();
                        forcePageAppRefresh = true ;
                    },

                    function (jqXHR, textStatus, errorThrown) {
                        $(button).removeAttr('disabled').val('Create Branch');

                        if (jqXHR.status != 0){
                            jagg.message({
                                content: "Error while creating version. Check the given version value and try again.",
                                type: 'error'
                            });
                        }
                    });
        }else{	// if wrong versioning number
            jagg.removeMessage();
            jagg.message({
                content: "Invalid version number - Provide version number in format major.minor.patch",
                type: 'error',
                id:'reposBuild'
            });
        }


    }

    var runThread = null ;


    function doDeploy(applicationKey,deployAction,stage,tagName,version,element){
        element.attr('disabled',true);
        jagg.post("../blocks/reposBuilds/add/ajax/add.jag", {
                    action: "deployArtifact",
                    applicationKey: applicationKey,
                    deployAction:deployAction,
                    stage:stage,
                    tagName:tagName,
                    version:version
                }, function (result) {
                    drawVersionsList();
                    jagg.message({
                        content: "Deployment has been submitted successfully - Refresh the page in few seconds.",
                        type: 'success',
                        id:'message_id_success'
                    });
                    element.attr('disabled',false);
                    hideNotification();
                },

                function (jqXHR, textStatus, errorThrown) {
                    if (jqXHR.status != 0){
                        jagg.message({
                            content: "Error occurred while deploying the artifact.",
                            type: 'error',
                            id:'message_id'
                        });
                    }



                    element.attr('disabled',false);
                });


    }
    function doLaunch(applicationKey, version,stage,state,type,element){
        element.attr('disabled',true);
        jagg.post("../blocks/application/get/ajax/list.jag", {
                    action: "getMetaDataForAppVersion",
                    applicationKey: applicationKey,
                    version: version,
                    stage: stage,
                    state: state,
                    type: type
                }, function (result) {
                    var resJSON;
                    var msg = "";
                    resJSON = jQuery.parseJSON(result);
                    var URL= resJSON.url;
                    element.attr('disabled',false);
                    if(!URL){
                        jagg.message({
                            content: "Application is not deployed yet!",
                            type: 'error'
                        });
                      return;
                    }

				//Domain mapping
				if(domainMappedVersion != null && version == domainMappedVersion && subDomain !=null && (subDomain.trim().length > 0)){
                   URL = "http://" + subDomain + ".<%=appDomain%>";
                }
                window.open(URL, '_blank')
            },
                function (jqXHR, textStatus, errorThrown) {

                    if (jqXHR.status != 0){
                        jagg.message({
                            content: "Error occurred while launching the artifact.!",
                            type: 'error',
                            id:'message_id'
                        });
                    }

                    element.attr('disabled',false);
                });

    }

    function doSearch(searchtext){

        $(".row").each(function(){
            var searchPara= searchtext.toLowerCase();
            var dv=$(this).attr("data-version");
            var ds=$(this).attr("data-stage");
         //   if(searchtext.indexOf("*")!=-1){
                var pattern=new RegExp(searchPara);
                if((pattern.test(dv))||(pattern.test(ds))){
                    $(this).show();

                }else{
                    $(this).hide();
                }


    //        }else{
    //            if((dv.indexOf(searchPara)==0)||(ds.indexOf(searchPara)==0)){
    //                $(this).show();
    //
    //            }else{
    //                $(this).hide();
    //            }
    //            }
    });

    }

    //]]

    function hideNotification() {
          // create new timer with given time interval
            setTimeout(function () {jagg.removeMessage('message_id_success')}, 5000);
        }

    </script>
    <div class="container">
        <article class="main">
        <%
    jagg.includeBlock("page/messages", null);
    jagg.includeBlock("page/notification-wall", {"wall_name":applicationKey+" - App Wall","applicationKey":applicationKey,"pageName":"App Home"});
    %>
            <header class="separator">
               <div class="content">
                   <h1 class="left" style="margin-right:20px;">Deployments</h1>

                    <form class="right fw_250 form-container search_form" onSubmit="return false;">
                        <div class="input_row">
                            <label for="filter_repos_or_stages" class="hide" >Filter Repos or Stages</label>
                            <input id="filter_repos_or_stages" type="text" class="fw_250 margin_15" placeholder="Filter Repos or Stages" name="filter_repos_or_stages" value=""  /><span class="icon-search"></span>
                        </div>
                    </form>
                </div>

            </header>
		<section class="special-message-wrapper"  style="margin-bottom: 20px">
			 <div class="page-content-area">
                    <div class="af_container">
                        <div class="af_row">
                            <div class="col-12">

                            <form id="versionUploadForm"
                                action="../blocks/lifecycle/add/ajax/add.jag" enctype="multipart/form-data" method='post'>
                                <input type="hidden" id="action" name="action"
                                    value="uploadNewVersionOfExistingApp" />
                                <input type="hidden" id="lifecycleName" name="lifecycleName" 
                                	value="<%=UPLOADABLE_APPLICATION_LIFE_CYCLE_NAME%>" />
                                <input type="hidden" id="applicationKey" name="applicationKey"
                                    value="<%=request.getParameter('applicationKey')%>" />
                                <input type="hidden" id="versionInput" name="latestVersion" value="123"/>
                                <input type="hidden" id="userName" name="userName"
                                                        value="<%=jagg.getUser()%>" />
                               <input type="hidden" id="latestVersion" name="applicationKey"
                                    value="<%=request.getParameter('applicationKey')%>" />
				 <div class="input_row">
                                    <label><strong>Upload New Version</strong></label>
                                    <span id="iconContainer">
                                        <input id="uploaded_application" type="file" name="uploaded_application" value="Browse..." />
                                    </span>
                                        <input type="button" value="Upload" class="btn main" id='appcreation' onclick="uploadNewVersion()" />

                            </form>

                            </div>
                        </div>
                    </div>
             </div>
		    </section>


            <div class="page-content-area">
                    <div class="af_container">
                        <div class="af_row">
                            <div class="col-12" id="repositories_and_builds_list">


	                         </div>
                        </div>
                    </div>
               </div>
        </article>
    </div><!-- /container -->
    <%
}); %>




