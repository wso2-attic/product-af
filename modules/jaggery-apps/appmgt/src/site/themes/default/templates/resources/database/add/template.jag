<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.template("resources/database/add", function (inputs, outputs, jagg) { %>
    <%
    var applicationName = request.getParameter("applicationName");
    var applicationKey = request.getParameter("applicationKey");
    var isDefaultMode = request.getParameter("isDefaultMode");
    AllowedAllStages=outputs.hasAccessForAllstages;
    isEdit = request.getParameter("isEdit");
    appInfo=session.get("APP_INFO");
    language=appInfo.language;
    %>

    <script type="text/javascript">
    var MAX_USER_NAME_LENGTH = 8;
    var ck_password = /^[A-Za-z0-9!@#$%^*_~]{6,15}$/;
    var eventRegisted_permTemp = false;
    var eventRegisted_user = false;
    $(document).ready(function(){
        var isDefault = <%=isDefaultMode%>;
        if(!isDefault){
            $('#table').html('<div class="row-fluid"><img src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile("images/processing.gif"))%>" id="processIndicator" style="width:16px;height:16px;"/></div></div>');
            jagg.post("../blocks/resources/database/add/ajax/add.jag", {
                action:"getDatabases",
                applicationKey:$("#applicationKey").attr('value')
            }, function (result) {

                if (result != undefined) {
                    var contentHeader = '<table class="table table-bordered">' +
                    '<tr>' +

                    '<th>Database Name</th>' +
                    '<th>Database Environment</th>' +
                    '<th>Database URL</th>' +
                    '<th>Actions</th>' +

                    '</tr>';
                    var parsedArray = jQuery.parseJSON(result);
                    for (var i = 0; i < parsedArray.length; i++) {
                        var name = parsedArray[i].name;
                        var rssInstanceName = parsedArray[i].rssInstanceName;
                        var url = parsedArray[i].url;

                        var row = '<tr>' +
                        '<td>' + name + '</td>' +
                        '<td>' + rssInstanceName + '</td>' +
                        '<td style="color: blue;">' + url + '</td>' +
                        '<td><a href="#" onclick="dropDatabase(' + "'" + name + "'" + ',' + "'" + rssInstanceName + "'" + ')">Drop</a>' +
                        '&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href="#" onclick="manage(' + "'" + name + "'" + ',' + "'" + rssInstanceName + "'" + ')">Manage</a>' + '</td>' +
                        '</tr>';
                        contentHeader += row;
                    }
                    contentHeader += '</table>';
                    if(parsedArray.length > 0){
                        $('#table').html(contentHeader);
                    }else{
                        $('#table').html('<div class="row-fluid"><div class="span12"><div class="alert alert-info">No databases created yet</div></div></div>');
                    }

                }
            },
            function (jqXHR, textStatus, errorThrown) {
                $('#table').html('<div class="row-fluid"><div class="span12"><div class="alert alert-error">Error while reading databases</div></div></div>');
            });
        }

        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
            action:"getCreatableRSSinstances",
            applicationKey:$("#applicationKey").attr('value')
        }, function (result) {
            if(result != undefined){

                var parsedArray = jQuery.parseJSON(result);
                for(var i = 0; i < parsedArray.length; i++) {
                    var name = parsedArray[i].name;

                    var row='<option>'+name+'</option>';
                    $("#rssInstances").append(row);
                    $("#rssInstances").select2({
                       formatResult: selectBoxOptionFormat,
                       minimumResultsForSearch: -1,
                       containerCssClass : "error" });
                }
                if(parsedArray.length == 0){
                    $('#rssInstances').html('<div class="row-fluid"><div class="span12"><div class="alert alert-info">No rssInstances created yet</div></div></div>');

                }
            }
            loadUsersForSelectedStage();
            loadTemplatesForSelectedStage();
        },
        function (jqXHR, textStatus, errorThrown) {
            $('#rssInstances').html('<div class="row-fluid"><div class="span12"><div class="alert alert-error">Error occurred while reading rssInstances</div></div></div>');
        });

	 // show password help messages
	/*$('#new_user_password').focus(function() {
		jagg.removeMessage('pwdcheck');
	  	jagg.message({content:'Capitalization matters. Use 6 to 15 characters. <br/> Use both letters and numbers. Add special characters (such as !, @, #, $, %, ^, *)',type:'info', id:'pwdcheck' });
	});*/

	$('input[type="checkbox"]').click(function(){
	    if($('#checkArray :checkbox:checked').length == $('input[name="permission[]"]').length){
		$('#selectAll').prop('checked', true);
	    } else {
		$('#selectAll').prop('checked', false);
	    }
	});


    });

    var inheriteddatabaseName, inheritedrssInstanceName, inheritedusername;

    function dropDatabase(name,rssInstanceName){

        jagg.post("../blocks/resources/database/drop/ajax/drop.jag", {
            action:"dropDatabase",
            applicationKey:$("#applicationKey").attr('value'),
            databaseName:name,
            rssInstanceName:rssInstanceName

        },  function (result) {
            document.location.reload(true);
            // jagg.message({content:'Database has been created',type:'info' });
        },
        function (jqXHR, textStatus, errorThrown) {

        });
    }

    function selectAllOptions() {
        var selectAll = document.getElementById('selectAll');
        var c = $('input[name="permission[]"]');
        if (selectAll.checked) {
            for (var i = 0; i < c.length; i++) {
                if (c[i].type == 'checkbox') {
                    c[i].checked = true;
                }
            }
        } else {
            for (var j = 0; j < c.length; j++) {
                if (c[j].type == 'checkbox') {
                    c[j].checked = false;
                }
            }
        }
    }

    function reloadUsersNTemplates() {
        loadUsersForSelectedStage();
        loadTemplatesForSelectedStage();

        //If the stage is development, we give an option to create datasources
        //showCreateDSCheckBox();
    }

    function showCreateDSCheckBox(){
        var databaseEnvironment = $("#rssInstances").attr('value');
        //TODO: remove the hardcoded name
        if(databaseEnvironment == 'Development'){
            if($('#addDatasourceCheckBox').is(':disabled')){
                $('#addDatasourceCheckBox').prop( "disabled", false );
            }
        }else{
            $('#addDatasourceCheckBox').prop( "disabled", true );
            $('#addDatasourceCheckBox').attr('checked', false);
        }
    }

    function loadUsersForSelectedStage(userName){

    jagg.post("../blocks/resources/database/users/list/ajax/list.jag", {
                    action:"getDatabaseUsersForRssInstance",
                    applicationKey:$("#applicationKey").attr('value'),
                    rssInstance:$("#rssInstances").attr('value')
            }, function (result) {
                 $("#js_db_user").html('');
                 $("#js_db_user").append('<option value="choose_user">Choose User</option>');
                 $("#js_db_user").append('<option value="create_new_user">Create New User</option>');
                    if(result != undefined){
                            var parsedArray = jQuery.parseJSON(result);
                            for(var i = 0; i < parsedArray.length; i++) {
                                    var name = parsedArray[i].name;
                                    var row='<option value="' + name + '">'+name+'</option>';
                                    $("#js_db_user").append(row);
								    if(userName!=undefined && name.indexOf(userName+'_')>-1){
										userName=name;
								    }
                            }
                    }

                     $("#js_db_user").select2();
                     if(userName!=undefined && userName!='')
                     	 $('#js_db_user').select2('val', userName);

                     if(!eventRegisted_user){
                        eventRegisted_user = true;
                     }else{
                        return;
                     }

                     $("#js_db_user").live("change", "select2-selecting", function(e) {
                            if((e.val == 'create_new_user') && $(this).next(".extra_fields_box").css("display") == "none"){
                                $(this).next(".extra_fields_box").slideToggle(250);
                            } else {
                                if($(this).next(".extra_fields_box").css("display") == "block") {
                                    $(this).next(".extra_fields_box").slideToggle(250);
                                }
                            }
                     });


            },
            function (jqXHR, textStatus, errorThrown) {
                    if ( jqXHR.status != 0){
                        jagg.message({content:'Error occurred while reading users.',type:'error', id:'databasecreation' });
                    }
            });

            }

        function loadTemplatesForSelectedStage(selectionValue){
            jagg.post("../blocks/resources/database/templates/ajax/list.jag", {
            action:"getAvailableTemplatesToAttachToDatabase",
            applicationKey:$("#applicationKey").attr('value'),
            rssInstance:$("#rssInstances").attr('value')
        }, function (result) {
                $("#js_db_template").html('');
                $("#js_db_template").append('<option value="choose_template">Choose Template</option>');
                $("#js_db_template").append('<option value="create_new_template">Create New Template</option>');
                if(result != undefined){
                        var parsedArray = jQuery.parseJSON(result);
                        for(var i = 0; i < parsedArray.length; i++) {
                                var name = parsedArray[i].name;
                                var row='<option value="'+name +'">'+name+'</option>';
                                $("#js_db_template").append(row);
                        }
                }
 				$("#js_db_template").select2();

                if(selectionValue!==undefined){
					$('#js_db_template').select2('val', selectionValue);
                }



                if(!eventRegisted_permTemp){
                    eventRegisted_permTemp = true;
                }else{
                    return;
                }

                $("#js_db_template").live("change", "select2-selecting", function(e) {
                if((e.val == 'create_new_template') && $(this).next(".extra_fields_box").css("display") == "none"){
                    $(this).next(".extra_fields_box").slideToggle(250);
                } else {
                    if($(this).next(".extra_fields_box").css("display") == "block") {
                        $(this).next(".extra_fields_box").slideToggle(250);
                    }
                }


             });

        },
        function (jqXHR, textStatus, errorThrown) {

            if ( jqXHR.status != 0){
                jagg.message({content:'Error occurred while reading templates',type:'error', id:'databasecreation' });
            }

        });
    }

    function createDatabase(btn){
	var isBasicDbCreation = true;
	var createDatasource = false;
        if($('#advancecheckbox').attr('checked') == 'checked'){
            isBasicDbCreation = false;
//            createDatasource = $('#addDatasourceCheckBox').is(':checked');
	}
        $(btn).attr('disabled','disabled');
        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
                    action:"createDatabaseAndAttachUser",
                    applicationKey:$("#applicationKey").attr('value'),
                    databaseName:$("#databaseName").attr('value').trim(),
                    databaseServerInstanceName:$('#rssInstances').val(),
                   // isBasic:$('#extra_fieldset_id').attr('data-hidden'),
		   			isBasic:isBasicDbCreation,
                    customPassword:$('#databaseUserPassword').attr('value').trim(),
                    userName:$("#js_db_user").attr('value'),
                    templateName:$("#js_db_template").attr('value'),
                    copyToAll:$('#copyToAll').is(':checked'),
                    createDatasource:createDatasource,
                    databaseDescription:$("#database_description").val().trim()
                },
                function (result) {
                    /*var parsedResult = jQuery.parseJSON(result);
                    if(parsedResult.successMsg != undefined) {
                        var msg = parsedResult.successMsg;
                        jagg.message({content:msg,type:'info' });
                    } else if(parsedResult.errorMsg != undefined) {
                        var msg = parsedResult.errorMsg;
                        jagg.message({content:msg,type:'error' });
                    }

                    document.location.reload(true);*/
					result = $.trim(result);
					if(result=='success'){
	        			callPreviousPage();	// load to previous page
	        		}else if(result.indexOf('Error occurred while creating the database user') > -1) {
	        			jagg.message({content:'Error occurred while creating user, Please try different Username!', type:'error', id:'databasecreation' });
	        		}else if(result.indexOf('database exists') > -1) {	// check whether database is already exists based on identifying key word call 'database exists'
	        			jagg.message({content:'Database Name already exists!', type:'error', id:'databasecreation' });
	        		} else if(result.indexOf('exists') > -1) {	// check whether user is already exists based on identifying key word call 'exists'
	        			jagg.message({content:'Template Name already exists!', type:'error', id:'databasecreation' });
	        		}else{
					jagg.message({content:'Error occured while creating database!' , type:'error', id:'databasecreation'});
				}
                    $(btn).removeAttr('disabled');
                    // jagg.message({content:'Database has been created',type:'info' });
                },
                function (jqXHR, textStatus, errorThrown) {
                    $(btn).removeAttr('disabled');
                });

        /*} else {

     		jagg.post("../blocks/resources/database/add/ajax/add.jag", {
                    action:"createDatabase",
                    applicationKey:$("#applicationKey").attr('value'),
                    databaseName:$("#databaseName").attr('value'),
                    databaseServerInstanceName:$('#rssInstances').val()
                },
                function (result) {
                	// database creation success
	                if(result=='success'){
	                	jagg.post("../blocks/resources/database/add/ajax/add.jag", {
	                		action:" ",
	                		applicationKey:$("#applicationKey").attr('value'),
	                		dbServerInstanceName:$("#rssInstances").attr('value'),
	                		databaseName:$("#databaseName").attr('value'),
	                		users :$("#js_db_user").attr('value'),
	                		templates :$("#js_db_template").attr('value')
	                	},
	                	function (result) {
	                		if(result=='success'){
	                			callPreviousPage();	// load to previous page
	                		} else if(result.indexOf('exists') > -1) {	// check whether user is already exists based on identifying key word call 'exists'
	                			jagg.message({content:'Template Name already exists!', type:'error', id:'databasecreation' });
	                		} else {
	                			jagg.message({content:'Error occurred while creating template!', type:'error', id:'databasecreation' });
	                		}
	                	},
	                	function (jqXHR, textStatus, errorThrown) {
	                		jagg.message({content:'Error while attaching user!', type:'error', id:'databasecreation' });
	                	});
	                } else if(result.indexOf('exists') > -1) {	// check whether user is already exists based on identifying key word call 'exists'
	                	jagg.message({content:'Database name already exist!', type:'error', id:'databasecreation' });
	                } else {
	                	jagg.message({content:'Error occurred while creating database!', type:'error', id:'databasecreation' });
	                }
	            },
                function (jqXHR, textStatus, errorThrown) {
                	jagg.message({content:'Error occurred while creating database!', type:'error', id:'databasecreation' });
                });
        }   */
    }

    function callPreviousPage(){
		var oldURL = document.referrer;
		window.location.replace(oldURL);
    }


    function validateUser() {
	    jagg.removeMessage();
        var validation = true;

        if(!checkUserName()){
            validation=false;
        }

        if(!validatePassword()){
            validation=false;
        }

        var rssInstance = $("#rssInstances").attr('value');

        if(rssInstance == ""){
            validation = false;
            jagg.message({content:'DB Environment cannot be empty!',type:'error', id:'databasecreation' });
        }

        return validation;
    }

    function checkUserName() {
        var validation = true;

        var username = $("#db_username").attr('value').trim();

        if (username == "" || username.length == 0) {
            jagg.message({content:'Username cannot be empty!',type:'error', id:'databasecreation' });
            validation=false;
        }

        var usernamePattern = /^[a-zA-Z0-9_]{1,7}$/;
        if (username.length > 0 && !usernamePattern.test(username)) {
            jagg.message({content:'Invalid Username - Use maximum 7 characters. <br/> &nbsp;&nbsp;&nbsp;&nbsp;Use both letters and numbers, special characters (such as _).',type:'error', id:'databasecreation' });
            validation=false;
        }

        return validation;
    }

    function validatePwdPattern(pwdId){
    	var validation = true;
    	var password = $("#"+pwdId).attr('value').trim();
    	if (password == "" || password.length == 0) {
            jagg.message({content:'Password cannot be empty!',type:'error', id:'databasecreation' });
            validation=false;
        } else {
			if(!ck_password.test(password)){
				validation=false;
				jagg.message({content:'Invalid Password - Use 6 to 15 characters. <br/> &nbsp;&nbsp;&nbsp;&nbsp;Use both letters and numbers. Add special characters (such as !, @, #, $, %, ^, *, _).',type:'error', id:'databasecreation' });
			}
		}
		return validation;
    }

    function validatePassword() {
    	var repeatPassword = $("#new_user_repeat_password").val().trim();
    	var password = $("#new_user_password").attr('value').trim();
    	var validation = validatePwdPattern("new_user_password");

    	if (validation && password != repeatPassword) {
    		jagg.message({content:'Password does not match!',type:'error', id:'databasecreation' });
    		validation=false;
    	}

    	return validation;
    }

    function validateDefaultPassword() {
    	var repeatPassword = $("#confirmDatabaseUserPassword").val().trim();
    	var password = $("#databaseUserPassword").val().trim();
    	var validation = validatePwdPattern("databaseUserPassword");

    	if (validation && password != repeatPassword) {
    		jagg.message({content:'Password does not match!',type:'error', id:'databasecreation' });
    		validation=false;
    	}

    	return validation;
    }


    function createDatabaseUser(){
        jagg.post("../blocks/resources/database/users/list/ajax/list.jag", {		// call backend
            action:"createDatabaseUser",
            applicationKey:$("#applicationKey").val(),
            password:$("#new_user_password").attr('value').trim(),
            rssInstance:$("#rssInstances").attr('value'),
            username:$("#db_username").attr('value').trim()
        },function (result) {

        	var result = $.trim(result);
        	if(result=='success') {
        		loadUsersForSelectedStage($("#db_username").attr('value'));
                $('#js_db_user').next().hide();
            }

        },function (jqXHR, textStatus, errorThrown) {	// if it failed, hide spinner and show error message.

            if ( jqXHR.status != 0){
                jagg.message({content:jqXHR.responseText, type:'error', id:'databasecreation' });
            }

        });
     }

     function validateTemplate(){
	    jagg.removeMessage();
        var templateName = $("#template_name").attr('value').trim();
        var validation = false;
        if(templateName == "" || templateName.length == 0){
            jagg.message({content:'Template name cannot be empty!',type:'error', id:'databasecreation' });
        }

        var templateNamePattern = /^[a-zA-Z0-9_]{1,10}$/;
        if (templateName.length > 0 && !templateNamePattern.test(templateName)) {
            jagg.message({content:'Invalid Template name - Use maximum 10 characters. <br/> &nbsp;&nbsp;&nbsp;&nbsp;Use both letters and numbers, special characters (such as _).',
            type:'error', id:'databasecreation' });
            validation =false;
        } else {
            validation = true;
        }

		if($('#checkArray :checkbox:checked').length == 0){
			validation = false;
			jagg.message({content:'Please select at least one Permission to proceed!',type:'error', id:'databasecreation'  });
		}


        return validation;
    }

    function createTemplate(){

     var alterPriv=(document.getElementById("alterPriv"));
     var alterRoutinePriv=(document.getElementById("alterRoutinePriv"));
     var createPriv=(document.getElementById("createPriv"));
     var createRoutinePriv=(document.getElementById("createRoutinePriv"));
     var createTmpTablePriv=(document.getElementById("createTmpTablePriv"));
     var createViewPriv=(document.getElementById("createViewPriv"));
     var deletePriv=(document.getElementById("deletePriv"));
     var dropPriv=(document.getElementById("dropPriv"));
     var eventPriv=(document.getElementById("eventPriv"));
     var executePriv=(document.getElementById("executePriv"));
     var grantPriv=(document.getElementById("grantPriv"));
     var indexPriv=(document.getElementById("indexPriv"));
     var insertPriv=(document.getElementById("insertPriv"));
     var lockTablesPriv=(document.getElementById("lockTablesPriv"));
     var referencesPriv=(document.getElementById("referencesPriv"));
     var selectPriv=(document.getElementById("selectPriv"));
     var showViewPriv=(document.getElementById("showViewPriv"));
     var triggerPriv=(document.getElementById("triggerPriv"));
     var updatePriv=(document.getElementById("updatePriv"));

     var templateName=$("#template_name").val().trim();
     var environment=$("#rssInstances").val();

     jagg.post("../blocks/resources/database/templates/ajax/list.jag", {
                                    action:"createTemplate",
                                    applicationKey:$("#applicationKey").attr('value'),
                                    templateName:templateName,
                                    environment:environment,
                                    alterPriv:alterPriv.checked,
                                    alterRoutinePriv:alterRoutinePriv.checked,
                                    createPriv:createPriv.checked,
                                    createRoutinePriv:createRoutinePriv.checked,
                                    createTmpTablePriv:createTmpTablePriv.checked,
                                    createViewPriv:createViewPriv.checked,
                                    deletePriv:deletePriv.checked,
                                    dropPriv:dropPriv.checked,
                                    eventPriv:eventPriv.checked,
                                    executePriv:executePriv.checked,
                                    grantPriv:grantPriv.checked,
                                    indexPriv:indexPriv.checked,
                                    insertPriv:insertPriv.checked,
                                    lockTablesPriv:lockTablesPriv.checked,
                                    referencesPriv:referencesPriv.checked,
                                    selectPriv:selectPriv.checked,
                                    showViewPriv:showViewPriv.checked,
                                    triggerPriv:triggerPriv.checked,
                                    updatePriv:updatePriv.checked,

                }
                ,function (result) {

            if(result.indexOf('template exists') > -1) {	// check whether template is already exists based on identifying key word call 'template exists'
                jagg.message({content:'Template Name already exists!', type:'error', id:'databasecreation' });
            } else {
                var response= jQuery.parseJSON(result);

                if(response[environment] == 'success'){
                    var template = templateName+'@'+environment;
                    loadTemplatesForSelectedStage(template);
                    $('#js_db_template').next().hide();

                } else {
                    jagg.message({content:'Error occurred while creating Template!', type:'error', id:'databasecreation' });
                }
			}
		},function (jqXHR, textStatus, errorThrown) {

		    if (jqXHR.status != 0){
	            jagg.message({content:'Error occurred while creating role',type:'error', id:'databasecreation' });
		    }

		});
    }


    function manage(name,rssInstanceName){
        var ele= document.getElementById("displayPage");
        ele.style.display = "none";
        var ele2= document.getElementById("managePage");
        ele2.style.display = "inline";
        var rssInstance= document.getElementById("newDatabaseServerInstanceName");
        rssInstance.value = rssInstanceName;
        rssInstance.readOnly=true;
        var newDatabaseName= document.getElementById("newDatabaseName");
        newDatabaseName.value = name;
        newDatabaseName.readOnly=true;

        $("#users").html();
        $("#templates").html();

        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
            action:"getAttachedUsers",
            applicationKey:$("#applicationKey").attr('value'),
            dbname:name,
            rssInstance:rssInstanceName
        }, function (result) {

            if(result != undefined){
                var contentHeader= '<table class="table table-bordered">'+
                '<tr>'+
                '<th>User Name</th>'+
                '<th>Actions</th>'+
                '</tr>';
                var parsedArray = jQuery.parseJSON(result);
                for(var i = 0; i < parsedArray.length; i++) {
                    var username = parsedArray[i].name;
                    var row='<tr>'+
                    '<td width="25%">'+username+'</td>'+
                    '<td width="75%">'+
                    '&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href="#" onclick="editUser('+"'"+rssInstanceName+"','"+name+"','"+username+"'"+')">Edit Privileges</a>'+
                    '&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href="#" onclick="detach('+"'"+rssInstanceName+"','"+name+"','"+username+"'"+')">Detach</a>' +'</td>'+
                    '</tr>';
                    contentHeader += row;
                }
                contentHeader += '</table>';
                if(parsedArray.length > 0){
                    $('#usersList').html(contentHeader);
                }else{
                    $('#usersList').html('No Users attached yet..');
                }
            }
        },
        function (jqXHR, textStatus, errorThrown) {

            if (jqXHR.status != 0){
                jagg.message({content:'Error occurred while creating database',type:'error', id:'databasecreation' });
            }

        });

        jagg.post("../blocks/resources/database/templates/ajax/list.jag", {
            action:"getAvailableTemplatesToAttachToDatabase",
            applicationKey:$("#applicationKey").attr('value'),
            rssInstance:rssInstanceName
        }, function (result) {
            if(result != undefined){
                var parsedArray = jQuery.parseJSON(result);
                for(var i = 0; i < parsedArray.length; i++) {
                    var name = parsedArray[i].name;
                    var row='<option>'+name+'</option>';
                    $("#templates").append(row);
                }
            }
        },
        function (jqXHR, textStatus, errorThrown) {

            if (jqXHR.status != 0){
                jagg.message({content:'Error occurred while reading templates',type:'error', id:'databasecreation' });
            }

        });

        jagg.post("../blocks/resources/database/users/list/ajax/list.jag", {
            action:"getAvailableUsersToAttachToDatabase",
            applicationKey:$("#applicationKey").attr('value'),
            dbServerInstanceName:$("#newDatabaseServerInstanceName").attr('value'),
            databaseName:$("#newDatabaseName").attr('value')
        }, function (result) {
            if(result != undefined){
                var parsedArray = jQuery.parseJSON(result);
                for(var i = 0; i < parsedArray.length; i++) {
                    var name = parsedArray[i];
                    var row='<option>'+name+'</option>';
                    $("#users").append(row);
                }
                var contentFooter= '</table>';
            }
        },
        function (jqXHR, textStatus, errorThrown) {

            if (jqXHR.status != 0){
                jagg.message({content:'Error occurred while reading users',type:'error', id:'databasecreation' });
            }

        });
    }

    function attachNewUser(){
        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
            action:"attachNewUser",
            applicationKey:$("#applicationKey").attr('value'),
            dbServerInstanceName:$("#newDatabaseServerInstanceName").attr('value'),
            databaseName:$("#newDatabaseName").attr('value'),
            users :$("#users").attr('value'),
            templates :$("#templates").attr('value')

        },
        function (result) {
            document.location.reload(true);
            // jagg.message({content:'Database has been created',type:'info', id:'databasecreation' });
        },
        function (jqXHR, textStatus, errorThrown) {

        });

    }

    function detach(rssInstanceName, name, username){

        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
            action:"detachUser",
            applicationKey:$("#applicationKey").attr('value'),
            dbServerInstanceName:rssInstanceName,
            databaseName:name,
            username :username

        },
        function (result) {
            document.location.reload(true);
            // jagg.message({content:'Database has been created',type:'info' });
        },
        function (jqXHR, textStatus, errorThrown) {

        });


    }


    function editUser(rssInstanceName,dbname,username){
        var ele= document.getElementById("managePage");
        ele.style.display = "none";
        var ele2= document.getElementById("editPrivilegePage");
        ele2.style.display = "inline";
        var userName= document.getElementById("UserName");
        userName.value = username;
        userName.readOnly=true;


        inheriteddatabaseName = dbname;
        inheritedrssInstanceName = rssInstanceName;
        inheritedusername = username;

        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
            action:"getUserPrivileges",
            applicationKey:$("#applicationKey").attr('value'),
            dbname:dbname,
            rssInstanceName:rssInstanceName,
            username:username
        }, function (result) {

            if(result != undefined){
                var parsedArray = jQuery.parseJSON(result);

                document.getElementById("editselectPriv").checked = setValue(parsedArray[0].selectPriv);
                document.getElementById("editinsertPriv").checked = setValue(parsedArray[0].insertPriv);
                document.getElementById("editupdatePriv").checked = setValue(parsedArray[0].updatePriv);
                document.getElementById("editdeletePriv").checked = setValue(parsedArray[0].deletePriv);
                document.getElementById("editcreatePriv").checked = setValue(parsedArray[0].createPriv);
                document.getElementById("editdropPriv").checked = setValue(parsedArray[0].dropPriv);
                document.getElementById("editgrantPriv").checked = setValue(parsedArray[0].grantPriv);
                document.getElementById("editreferencesPriv").checked = setValue(parsedArray[0].referencesPriv);
                document.getElementById("editindexPriv").checked = setValue(parsedArray[0].indexPriv);
                document.getElementById("editalterPriv").checked = setValue(parsedArray[0].alterPriv);
                document.getElementById("editcreateTmpTablePriv").checked = setValue(parsedArray[0].createTmpTablePriv);
                document.getElementById("editlockTablesPriv").checked = setValue(parsedArray[0].lockTablesPriv);
                document.getElementById("editcreateViewPriv").checked = setValue(parsedArray[0].createViewPriv);
                document.getElementById("editshowViewPriv").checked = setValue(parsedArray[0].showViewPriv);
                document.getElementById("editcreateRoutinePriv").checked = setValue(parsedArray[0].createRoutinePriv);
                document.getElementById("editalterRoutinePriv").checked = setValue(parsedArray[0].alterRoutinePriv);
                document.getElementById("editexecutePriv").checked = setValue(parsedArray[0].executePriv);
                document.getElementById("editeventPriv").checked = setValue(parsedArray[0].eventPriv);
                document.getElementById("edittriggerPriv").checked = setValue(parsedArray[0].triggerPriv);
            }
        },
        function (jqXHR, textStatus, errorThrown) {

            if (jqXHR.status != 0){
                jagg.message({content:'Error occurred while reading templates',type:'error', id:'databasecreation' });
            }

        });

    }

    function setValue(value){

        if(value == 'Y'){

            return true;
        }else if (value == 'N'){

            return false;
        }
    }

    function editUserPermission(){

        var alterPriv=(document.getElementById("editalterPriv"));
        var alterRoutinePriv=(document.getElementById("editalterRoutinePriv"));
        var createPriv=(document.getElementById("editcreatePriv"));
        var createRoutinePriv=(document.getElementById("editcreateRoutinePriv"));
        var createTmpTablePriv=(document.getElementById("editcreateTmpTablePriv"));
        var createViewPriv=(document.getElementById("editcreateViewPriv"));
        var deletePriv=(document.getElementById("editdeletePriv"));
        var dropPriv=(document.getElementById("editdropPriv"));
        var eventPriv=(document.getElementById("editeventPriv"));
        var executePriv=(document.getElementById("editexecutePriv"));
        var grantPriv=(document.getElementById("editgrantPriv"));
        var indexPriv=(document.getElementById("editindexPriv"));
        var insertPriv=(document.getElementById("editinsertPriv"));
        var lockTablesPriv=(document.getElementById("editlockTablesPriv"));
        var referencesPriv=(document.getElementById("editreferencesPriv"));
        var selectPriv=(document.getElementById("editselectPriv"));
        var showViewPriv=(document.getElementById("editshowViewPriv"));
        var triggerPriv=(document.getElementById("edittriggerPriv"));
        var updatePriv=(document.getElementById("editupdatePriv"));

        jagg.post("../blocks/resources/database/add/ajax/add.jag", {
            action:"editUserPermissions",
            applicationKey:$("#applicationKey").attr('value'),
            databaseName:inheriteddatabaseName,
            rssInstanceName:inheritedrssInstanceName,
            username:inheritedusername,
            password:$("#userpassword").attr('value'),
            alterPriv:alterPriv.checked,
            alterRoutinePriv:alterRoutinePriv.checked,
            createPriv:createPriv.checked,
            createRoutinePriv:createRoutinePriv.checked,
            createTmpTablePriv:createTmpTablePriv.checked,
            createViewPriv:createViewPriv.checked,
            deletePriv:deletePriv.checked,
            dropPriv:dropPriv.checked,
            eventPriv:eventPriv.checked,
            executePriv:executePriv.checked,
            grantPriv:grantPriv.checked,
            indexPriv:indexPriv.checked,
            insertPriv:insertPriv.checked,
            lockTablesPriv:lockTablesPriv.checked,
            referencesPriv:referencesPriv.checked,
            selectPriv:selectPriv.checked,
            showViewPriv:showViewPriv.checked,
            triggerPriv:triggerPriv.checked,
            updatePriv:updatePriv.checked
        }                  ,
        function (result) {
            document.location.reload(true);
            // jagg.message({content:'Database has been created',type:'info' });
        },
        function (jqXHR, textStatus, errorThrown) {

        });


    }

    function validateDBName(){
        var dbname = $("#databaseName").val();
        var validation = false;
        if(dbname == ""){
            $("#dbname_empty_warning").show();
        } else{
            validation = true;
            $("#dbname_empty_warning").hide();
        }
        return validation;
    }

    function validateDbNameAlphaNumeric(){
    		var isDbNameValid=true;
        	var dbName = $("#databaseName").val().trim();
            var databaseNamePattern = /^[a-zA-Z0-9_]{1,5}$/;
            if (dbName.length > 0 && !databaseNamePattern.test(dbName)) {
            	jagg.message({
                    content: "Invalid Database name - Use maximum 5 characters. <br/> &nbsp;&nbsp;&nbsp;&nbsp;Use both letters and numbers, special characters (such as _).",
                    id:'dbcreationerrormsg',
                    type: 'error', id:'dbcreationerrormsg'
                });
            	validated = validated && false;
    			isDbNameValid = false;
            } else {
            	$('#databaseName').val(dbName);
    			isDbNameValid = true;
            }
    		return isDbNameValid;
        }

	// form submition validation
    function validateForm() {
	    jagg.removeMessage();
        var validation = true;
        var dbname = $("#databaseName").val().trim();
        if(dbname == "" || dbname.length == 0){
            validation = false;
            jagg.message({content:'Database name cannot be empty!',type:'error', id:'databasecreation'  });
        } else {
            validation = validateDbNameAlphaNumeric();
        }

        if(!validation) {
            return validation;
        }

        if($("#advancecheckbox").is(':checked')){
        	var rssInstance = $("#rssInstances").attr('value');
        	if(rssInstance == ''){
        		validation = false;
        		jagg.message({content:'Database Environment cannot be empty!',type:'error', id:'databasecreation'  });
        	}

        	var user = $("#js_db_user").attr('value');
        	if(user=="create_new_user" || user=="choose_user"){
        		validation = false;
        		jagg.message({content:'Select valid User!',type:'error', id:'databasecreation'  });
        	}

        	var template = $("#js_db_template").attr('value');
        	if(template=="create_new_template" || template=="choose_template"){
        		validation = false;
        		jagg.message({content:'Select valid Permission Template!',type:'error', id:'databasecreation'  });
        	}


        } else {
        	validation = validateDefaultPassword("databaseUserPassword");
        }

        return validation;
    }

    $(document).ready(function(){
        $('.js_cancel_user').click(function(){
            $('#js_db_user').next().hide();
            $('#js_db_user').select2('val','choose_user');
        });
        $('.js_cancel_template').click(function(){
            $('#js_db_template').next().hide();
            $('#js_db_template').select2('val','choose_template');
        });
//         $('#js_extra_fieldset_on').click(function(){
//             $(this).next().next().toggle('fast');
//             if($(this).attr('data-down') == 'hidden'){

// 		$('input:checkbox[id=advancecheckbox]').attr('checked',true);
//                 $('#databaseUserPassword').attr('data-value',$('#databaseUserPassword').val());
//                 $('#databaseUserPassword').val('').attr('disabled','disabled');
//                 $('#confirmDatabaseUserPassword').attr('data-value',$('#confirmDatabaseUserPassword').val());
//                 $('#confirmDatabaseUserPassword').val('').attr('disabled','disabled');
//                 $(this).attr('data-down','visible');
//                 $('#js_db_template').next().hide();
//                 $('#js_db_user').next().hide();
//             }else{

// 		$('input:checkbox[id=advancecheckbox]').attr('checked',false);
//                 $('#databaseUserPassword').removeAttr('disabled');
//                 $('#databaseUserPassword').val($('#databaseUserPassword').attr('data-value'));
//                 $('#confirmDatabaseUserPassword').removeAttr('disabled');
//                 $('#confirmDatabaseUserPassword').val($('#confirmDatabaseUserPassword').attr('data-value'));
//                 $(this).attr('data-down','hidden');
//                 $('#js_db_template').next().hide();

//             }
//             $('#js_db_user').select2('val','choose_user');
//             $('#js_db_template').select2('val','choose_template');
//         });
//         $('.js_extra_fields_on').on("click", function(event){
//             var $el = $(this);
//             $(this).toggleClass("active");
//             $(this).next(".extra_fields_box").slideToggle(250, function() {
//                 if( $el.prev().is(':disabled') == false) {
//                      $el.prev().attr("disabled", "disabled");
//                 } else {
//                      $el.prev().removeAttr('disabled');
//                 }
//             });
//             event.preventDefault();
//         });

        $("#js_permission_template").live("change", "select2-selecting", function(e) {
            if(e.val == 'create_new_template' && $(this).parent().next(".additional_fields_box").css("display") == "none"){
                $(this).parent().next(".additional_fields_box").slideToggle(250);
            } else {
                if($(this).parent().next(".additional_fields_box").css("display") == "block") {
                    $(this).parent().next(".additional_fields_box").slideToggle(250);
                }
            }
        });
        $('#copyToAll').change(function() {
            if($(this).is(":checked")) {
                $('#js_extra_fieldset_on').slideUp('fast');
                $('#db_env_div').slideUp('fast');

            }else{
                $('#js_extra_fieldset_on').slideDown('fast');
                $('#db_env_div').slideDown('fast');


            }
        });
        $('#advancecheckbox').change(function() {
            if($(this).is(":checked")) {
                $(this).parent().next().next().slideDown('fast');
                $('#copyall').slideUp('fast');
                $('#password_section').slideUp('fast');
//                $('#createInAllEnvsHelpBlock').slideUp('fast');
                $('#databaseUserPassword').attr('data-value',$('#databaseUserPassword').val());
                $('#databaseUserPassword').val('').attr('disabled','disabled');
                $('#confirmDatabaseUserPassword').attr('data-value',$('#confirmDatabaseUserPassword').val());
                $('#confirmDatabaseUserPassword').val('').attr('disabled','disabled');
                $(this).attr('data-down','visible');
                $('#js_db_template').next().hide();
                $('#js_db_user').next().hide();
                //showCreateDSCheckBox();


            }else{
                $(this).parent().next().next().slideUp('fast');

                $('#copyall').slideDown('fast');
                $('#password_section').slideDown('fast');
//                $('#createInAllEnvsHelpBlock').slideDown('fast');
                $('#databaseUserPassword').removeAttr('disabled');
                $('#databaseUserPassword').val($('#databaseUserPassword').attr('data-value'));
                $('#confirmDatabaseUserPassword').removeAttr('disabled');
                $('#confirmDatabaseUserPassword').val($('#confirmDatabaseUserPassword').attr('data-value'));
                $(this).attr('data-down','hidden');
                $('#js_db_template').next().hide();

            }


            $('#js_db_user').select2('val','choose_user');
            $('#js_db_template').select2('val','choose_template');

        });

    });
    </script>

        <div class="container">
                    <article class="main">
                            <header class="separator">
                                <div>
                                    <% jagg.includeBlock("page/messages", null); %>
				                    <% jagg.includeBlock("page/eventing", {"applicationKey":null,"pageName":PAGES.RESOURCES}); %>
                                    <% jagg.includeBlock("page/notification-wall", {"wall_name":applicationKey+" - App Wall","applicationKey":applicationKey,"pageName":"App Home"}); %>
                                </div>
                                <div class="content">
                                    <h1>Databases</h1>
                                 </div>
                            </header>
                            <input type="hidden" id='applicationKey' value='<%=request.getParameter("applicationKey")%>' />
                            <section class="separator">
                                <div class="page_nav">
                                    <div class="content clear">
                                        <ol class="breadcrumb">
						<li class="breadcrumb_item"><a href="javascript:callPreviousPage();" class="breadcrumb_link">Database Configurations</a></li>
                                                <li class="breadcrumb_item"><h2>Create New Database</h2></li>
                                        </ol>
                                     </div>
                                </div>
                                <div class="content clear well">
                                    <div class="form-container">

                                        <form id='displayPage'  method='post'  class="hold right_label">
                                          <fieldset>
                                                <div class="input_row">
                                                    <label for="database_name" ><strong>Database Name</strong> <em>*</em></label>
                                                    <input type="text" id='databaseName' maxlength="5"/>
                                                </div>
                                                <div class="input_row" id="db_env_div">
                                                    <label for="db_environment" ><strong>Database Environment</strong> <em>*</em></label>
                                                    <select id='rssInstances' class="select_list half big" name="db_environment" onChange="reloadUsersNTemplates()"></select>
                                                </div>
                                                <%if((isEdit=="false")&&(AllowedAllStages)){%>
                                                <div class="input_row">
					                                <legend id="copyall">
						                                <input type="checkbox" align="left" id="copyToAll"> Create Database and Datasources in all environments
						                            </legend>
						                        </div>
                        						<%}%>
                                                <div class="input_row">
                                                    <label for="database_description"><strong>Description</strong></label>
                                                    <textarea name="database_description" id="database_description" rows="5" class="full"></textarea>
                                                </div>
                                                <div id="password_section">
                                                <div class="input_row">
                                                    <label for="default_user_password" ><strong>Default User Password</strong><em>*</em></label>
                                                    <input type="password" id='databaseUserPassword' class="half js_extra_field_disabled" maxlength="15"/>
                                                </div>

                                                <div class="input_row">
	                                                <label for="default_user_password" ><strong>Confirm Password</strong><em>*</em></label>
	                                                <input type="password" id='confirmDatabaseUserPassword' class="half js_extra_field_disabled" maxlength="15"/>
                                                </div>
                                                </div>
                                           </fieldset>

                                       					    <fieldset class="push_top_10">

						<legend id="js_extra_fieldset_on" data-down="hidden">

 						<input type="checkbox" name="advanced_options" align="left" id="advancecheckbox"> Advanced Options
 					 </legend>
						<div id="createAdvancedHelp" style="margin-left:220px;font-size:13px;color:#777;"></div>

                                                <div class="extra_fieldset hide">
                                                    <div class="input_row">
                                                        <label for="db_user" ><strong>User</strong> <em>*</em></label>
                                                        <select class="select_list half big" id="js_db_user" name="db_user"></select>

                                                        <div class="extra_fields_box hide" >
                                                            <div class="extra_fields">

                                                                <div class="extra_field_row">
                                                                    <div class="pw_50">
                                                                    <label for="db_username"><strong>Username:</strong></label>
                                                                    <input type="text" name="db_username" id="db_username" class="half" maxlength="7"/>
                                                                    </div>
                                                                </div>
                                                                <div class="extra_field_row">
                                                                    <div class="left pw_50">
                                                                        <label for="new_user_password"><strong>Password:</strong></label>
                                                                        <input type="password" name="new_user_password" id="new_user_password" class="half" maxlength="15"/>
                                                                    </div>
                                                                    <div class="right pw_50">
                                                                        <label for="new_user_repeat_password"><strong>Repeat Password:</strong></label>
                                                                        <input type="password" name="new_user_repeat_password" id="new_user_repeat_password" class="half" maxlength="15"/>
                                                                    </div>
                                                                    <div class="clearfix"></div>
                                                                </div>
                                                                <div class="extra_field_row last" style="padding-top:20px;">
                                                                    <div class="pw_100">
                                                                    <label for="permission_template"></label>
                                                                    <!--button class="btn main" onclick="if(validateUser()){createDatabaseUser();}">Create DB User</button-->
                                                                    <input type='button' name='Submit' value='Create DB User' onclick="if(validateUser()){createDatabaseUser();}" class='btn main'/>
                                                                    <a class="js_cancel_user">Cancel</a>
                                                                    </div>

                                                                </div>
                                                                <div class="clearfix"></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="input_row">
                                                        <label for="db_template" ><strong>Permission Template</strong> <em>*</em></label>
                                                        <select id='js_db_template' class="select_list half big" name="db_template">
                                                        </select>
                                                         <div class="extra_fields_box hide" >
                                                            <div class="extra_fields">

                                                                <div class="extra_field_row">
                                                                    <div class="pw_50">
                                                                    <label for="template_name"><strong>Template Name:</strong></label>
                                                                    <input type="text" name="template_name" id="template_name" class="half" maxlength="10"/>
                                                                    </div>
                                                                </div>
                                                                <div class="extra_field_row">
                                                                <h2 class="next_page"><label><input type="checkbox" name="selectAll" id="selectAll" checked="checked" onclick="selectAllOptions()"> Select All Permissions </label></h2><br/><br/>

                                                                <fieldset id="checkArray">
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='selectPriv' checked="checked" /> SELECT</label><br />
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='insertPriv' checked="checked" /> INSERT</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='updatePriv' checked="checked" /> UPDATE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='deletePriv' checked="checked" /> DELETE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='createPriv' checked="checked" /> CREATE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='dropPriv' checked="checked" /> DROP</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='grantPriv' checked="checked" /> GRANT</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='referencesPriv' checked="checked" /> REFERENCES</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='indexPriv' checked="checked" /> INDEX</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='alterPriv' checked="checked" /> ALTER</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='createTmpTablePriv' checked="checked" /> CREATE_TEMP_TABLE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='lockTablesPriv' checked="checked" /> LOCK_TABLES</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='createViewPriv' checked="checked" /> CREATE_VIEW</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='showViewPriv' checked="checked" /> SHOW_VIEW</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='createRoutinePriv' checked="checked" /> CREATE_ROUTINE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='alterRoutinePriv' checked="checked" /> ALTER_ROUTINE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='executePriv' checked="checked" /> EXECUTE</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='eventPriv' checked="checked" /> EVENT</label></br>
                                                                    <label style="width:100%"><input type="checkbox" name="permission[]" id='triggerPriv' checked="checked" /> TRIGGER</label></br>
                                                                </fieldset>
                                                                </div>
                                                                <div class="extra_field_row last" style="padding-top:20px;">
                                                                    <div class="pw_100">
                                                                    <label for="permission_template"></label>
                                                                    <!--button class="btn main" onclick="if(validateTemplate()){createTemplate();}"  >Save</button-->
                                                                      <input type='button' name='Submit' value='Create Template' onclick="if(validateTemplate()){createTemplate();}" class='btn main'/>
                                                                    <a class="js_cancel_template">Cancel</a>
                                                                    </div>

                                                                </div>
                                                                <div class="clearfix"></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <!--<div class="input_row">
                                                    <legend>
                                                    <input type="checkbox" disabled align="left" id="addDatasourceCheckBox"> Add Datasource
                                                    </legend>
                                                    </div>-->
                                                </div>
                                           </fieldset>

                                            <div class="buttonrow">



						<input type='button' name='Submit' value="Create Database" class="btn main" onclick="if(validateForm()){createDatabase(this);}"
                                                       class='btn btn-primary'/>
                                               <a href="#" onclick="return callPreviousPage();" style="text-decoration: none;">Cancel</a>
                                            </div>

                                         </form>

                                    </div>
                                </div>
                            </section>
                            <div class="clearfix"></div>
                     </article>
                </div><!-- /container -->

        <%
}); %>
