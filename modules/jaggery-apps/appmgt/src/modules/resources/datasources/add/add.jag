<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var loggedInUser = jagg.getUser();
var log = new Log('modules/resources/datasources/add/add.jag');
var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.ResourceRelatedEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;

var cookieRefreshInterval = getProperty(COOKIE_REFRESH_INTERVAL);
var clock = new Date();
var modManager = jagg.module("manager");
var permissionModule = jagg.module("permission");
var lifeCycleModule =  jagg.module("lifecycle");
var rssFilter = jagg.module("rss-filter");

var deleteDatasource = function (applicationId, stageName, name, isEdit) {
    var ws = require('ws');
    var deleteDataSourceService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:deleteDataSource";

    var payload ='<p:deleteDataSource xmlns:p="http://datasource.ext.appfactory.carbon.wso2.org">'+
                     '<xs:dsName xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+name+'</xs:dsName>'+
                     '<xs:applicationID xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+applicationId+'</xs:applicationID>'+
                 '</p:deleteDataSource>';
    var result;
    var correlationKey = applicationId + "-" + stageName + "-datasource-" + name;
    try {
        var endPoint = getProperty('ApplicationDeployment.DeploymentStage.' + stageName + '.DeploymentServerURL') + 'AppFactoryNDataSourceAdmin';
        modManager.setAuthHeaders(options);
        deleteDataSourceService.open(options, endPoint, false);
        deleteDataSourceService.send(payload);

        // delete datasource  from app factory db
        rssFilter.deleteDatasource(name, applicationId, stageName);

	if(!isEdit){
            try {
                var notificationTitle = "Datasource " + name + " deleted from " + stageName;
                var notificationMessage = "In environment: " + stageName;
                var eventBuilderInstance = EventBuilder.resourceDeletionCompletedEvent(applicationId, loggedInUser, notificationTitle, notificationMessage, correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending delete datasource success notification \n" + e.message);
            }
	}
        return {
        	error:false
        };

    } catch (e) {
	if(!isEdit){
            try {
                var notificationTitle = "Datasource " + name + " deletion failed in " + stageName;
                var notificationMessage = "In environment: " + stageName;
                var eventBuilderInstance = EventBuilder.resourceDeletionCompletedEvent(applicationId, loggedInUser, notificationTitle, notificationMessage, correlationKey, "ERROR");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending delete datasource failure notification \n" + e.message);
            }
	}
        log.error("Error while deleting datasource " + stageName + "\n" + e.message);
        throw "Error while deleting datasource  " + stageName;
    }
};

var addDataSource = function (applicationId, stageName, name, url, driverClass, username,
        password, description, isEdit) {
    var ws = require('ws');
    var createDataSourcesService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:addDataSource";

    var payload = '<p:addDataSource xmlns:p="http://datasource.ext.appfactory.carbon.wso2.org">'+
                 '<ax29:dsmInfo xmlns:ax29="http://datasource.ext.appfactory.carbon.wso2.org">' +
                 '<ax29:definition xmlns:ax29="http://services.core.ndatasource.carbon.wso2.org/xsd">'+
                 '<xs:dsXMLConfiguration xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">'+
                  '<![CDATA[<configuration>' +
                  '<url>' + url + '</url>' +
                  '<username>' + username + '</username>' +
                  '<password>' + password + '</password>' +
                  '<driverClassName>' + driverClass + '</driverClassName>' +
                  '<maxActive>50</maxActive>' +
                  '<maxWait>60000</maxWait>' +
                  '<testOnBorrow>true</testOnBorrow>' +
                  '<validationQuery>SELECT 1</validationQuery>' +
                  '<validationInterval>30000</validationInterval>' +
                  '</configuration>]]>' +
                  '</xs:dsXMLConfiguration>'+
                  '<xs:type xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">RDBMS</xs:type>'+
                  '</ax29:definition>'+
                  '<xs:description xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">'+description+'</xs:description>'+
                  '<ax210:jndiConfig xmlns:ax210="http://services.core.ndatasource.carbon.wso2.org/xsd">'+
                  '<xs:name xmlns:xs="http://core.ndatasource.carbon.wso2.org/xsd">'+ 'jdbc/'+name+'</xs:name>'+
                  '<xs:useDataSourceFactory xmlns:xs="http://core.ndatasource.carbon.wso2.org/xsd">false</xs:useDataSourceFactory>' +
                  '</ax210:jndiConfig>'+
                  '<xs:name xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">'+name+'</xs:name>'+
                  '<xs:system xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">false</xs:system>'+
                  '</ax29:dsmInfo>'+
                  '<xs:applicationID xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+applicationId+'</xs:applicationID>'+
                  '</p:addDataSource>';;
    var result;
    var correlationKey = applicationId + "-" + stageName + "-datasource-" + name;
    try {
    	var endPoint = getProperty('ApplicationDeployment.DeploymentStage.' + stageName + '.DeploymentServerURL') + 'AppFactoryNDataSourceAdmin';
    	modManager.setAuthHeaders(options);
        createDataSourcesService.open(options, endPoint, false);
        createDataSourcesService.send(payload);
	    result = createDataSourcesService.responseE4X;
        var datasources = buildResponse(result);
        var tenantDomain = modManager.getTenantDomain();
        log.info("Data source:" + name + " created for application:" + applicationId + " in tenant domain:" + tenantDomain);

        // adding datasource info to app-factory db
        rssFilter.addDatasource(name, applicationId, stageName, description);
	if(!isEdit){
            try {
                var notificationTitle = "Datasource " + name + " created in " + stageName;
                var notificationMessage = "In environment: " + stageName;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationId, loggedInUser, notificationTitle, notificationMessage, correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error(e);
                log.error("Error while sending create datasource success notification!");
            }
	}else{
            try {
                var notificationTitle = "Datasource " + name + " edited in " + stageName;
                var notificationMessage = "In environment: " + stageName;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationId, loggedInUser, notificationTitle, notificationMessage, correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error(e);
                log.error("Error while sending edit datasource success notification!");
            }
        }


        return datasources;


    } catch (e) {
	if(!isEdit){
            try {
                var notificationTitle = "Datasource " + name + " creation failed in " + stageName;
                var notificationMessage = "In environment: " + stageName;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationId, loggedInUser, notificationTitle, notificationMessage, correlationKey, "ERROR");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error(e);
                log.error("Error while sending create datasource failure notification!");
            }
	}else{
            try {
                var notificationTitle = "Datasource " + name + " edit failed in " + stageName;
                var notificationMessage = "In environment: " + stageName;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationId, loggedInUser, notificationTitle, notificationMessage, correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error(e);
                log.error("Error while sending edit datasource failure notification!");
            }
        }

        log.error(e);
        log.error("Error while creating datasource in stage : " + stageName);
        throw "Error while creating datasource  " + stageName;
    }
	
};



var createDataSource = function (stage,applicationId, name, url, driverClass, username,
                                 password, description) { 
    var ws = require('ws');
    var createDataSourcesService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:addDataSource";

    var payload ='<p:addDataSource xmlns:p="http://datasource.ext.appfactory.carbon.wso2.org">'+
                 '<ax29:dsmInfo xmlns:ax29="http://datasource.ext.appfactory.carbon.wso2.org">' +
                 '<ax29:definition xmlns:ax29="http://services.core.ndatasource.carbon.wso2.org/xsd">'+
                 '<xs:dsXMLConfiguration xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">'+
                  '<![CDATA[<configuration>' +
                  '<url>' + url + '</url>' +
                  '<username>' + username + '</username>' +
                  '<password>' + password + '</password>' +
                  '<driverClassName>' + driverClass + '</driverClassName>' +
                  '<maxActive>50</maxActive>' +
                  '<maxWait>60000</maxWait>' +
                  '<testOnBorrow>true</testOnBorrow>' +
                  '<validationQuery>SELECT 1</validationQuery>' +
                  '<validationInterval>30000</validationInterval>' +
                  '</configuration>]]>' +
                  '</xs:dsXMLConfiguration>'+
                  '<xs:type xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">RDBMS</xs:type>'+
                  '</ax29:definition>'+
                  '<xs:description xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">'+description+'</xs:description>'+
                  '<ax210:jndiConfig xmlns:ax210="http://services.core.ndatasource.carbon.wso2.org/xsd">'+
                  '<xs:name xmlns:xs="http://core.ndatasource.carbon.wso2.org/xsd">'+ 'jdbc/'+name+'</xs:name>'+
                  '<xs:useDataSourceFactory xmlns:xs="http://core.ndatasource.carbon.wso2.org/xsd">false</xs:useDataSourceFactory>' +
                  '</ax210:jndiConfig>'+
                  '<xs:name xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">'+name+'</xs:name>'+
                  '<xs:system xmlns:xs="http://services.core.ndatasource.carbon.wso2.org/xsd">false</xs:system>'+
                  '</ax29:dsmInfo>'+
                  '<xs:applicationID xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+applicationId+'</xs:applicationID>'+
                  '</p:addDataSource>';
    
    // AF will create data sources only in a initial stage.
    var deploymentStages = lifeCycleModule.getInitialLifeCycleStages();
    
    var result;
    var datasources = [];

    var correlationKey = applicationId + "-" + stage + "-datasource-" + name;
    	try {
    		var endPoint = getProperty('ApplicationDeployment.DeploymentStage.' + stage + '.DeploymentServerURL');
    		modManager.setAuthHeaders(options);
    		createDataSourcesService.open(options, endPoint + 'AppFactoryNDataSourceAdmin', false);
    		createDataSourcesService.send(payload);
    		result = createDataSourcesService.responseE4X;
    		var datasource = buildResponse(result);
            var tenantDomain = modManager.getTenantDomain();
            log.info("Data source:" + name + " created for application:" + applicationId + " in tenant domain:" +
                     tenantDomain);
    		datasources.push(datasource);

            // add datasource info to app factory db
            rssFilter.addDatasource(name, applicationId, stage, description);

            try {
                var notificationTitle = "Datasource " + name + " created in " + stage;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationId, loggedInUser, notificationTitle, "", correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending create datasource success notification \n" + e.message);
            }

    	} catch (e) {
            try {
		        var notificationTitle = "Datasource " + name + " creation failed in " + stage;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationId, loggedInUser, notificationTitle, "", correlationKey, "ERROR");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending create datasource failure notification \n" + e.message);
            }
            log.error("Error while creating datasource in stage " + stage + "\n" + e.message);
    	}

    return datasources;
        	    
};

var copyNewDataSources = function(applicationId, sourceStage, targetStage) {
	
	var resourcesModule = jagg.module("resources");
	
	var dataSourcesInSourceStage = resourcesModule.getDatasources(applicationId, sourceStage);
	var dataSourcesInTargetStage = resourcesModule.getDatasources(applicationId, targetStage);
	
	dataSourcesInSourceStage = buildMap(dataSourcesInSourceStage);
	dataSourcesInTargetStage = buildMap(dataSourcesInTargetStage);
	

	for (var dsName in dataSourcesInSourceStage){
		if ( dataSourcesInTargetStage[dsName] == null){
			try{				
				var dsToCreate = dataSourcesInSourceStage[dsName];
				
				log.info("copying datasource: " + dsToCreate.name + "to: " + targetStage);
				
				resourcesModule.addDataSource(applicationId, targetStage, dsToCreate.name, dsToCreate.url, dsToCreate.driverClassName, 
						                      dsToCreate.username, dsToCreate.password, dsToCreate.description, false);
			} catch(e){
				log.error("Error while copying datasource: " + ds.name + "from :" 
								+ sourceStage + "to: " + targetStage + "\n" + e.message);
			}
		}
	}
	
};

function buildMap(dsObjectArray){
	var map = {};
	if (dsObjectArray != null){
		for ( i = 0 ; i < dsObjectArray.length; i++){
			var ds = dsObjectArray[i];
			map[ds.name] = ds;
		}
	}
	return map;
};

function buildResponse(result){
   var databaseObject=[];
   
   if(result != undefined){    
     var response=result.*::["return"].text();
     var entry=response[0];
     return entry;
   }
}

%>
