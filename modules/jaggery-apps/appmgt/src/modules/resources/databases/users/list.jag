<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var wso2_rss_instanceName = 'SYSTEM';

var log = new Log('modules/resources/databases/users/list.jag');
var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.ResourceRelatedEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;
var loggedInUser = jagg.getUser();
var rssFilter=jagg.module("rss-filter");
var modManager = jagg.module("manager");

var getStorageServerUrl= function(databaseServerInstanceName){
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	return getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
};
var getRssInstanceName = function(databaseServerInstanceName){
	return wso2_rss_instanceName;
};

var getDatabaseUsersForRssInstance = function(applicationKey, rssInstanceName) {
	var ws = require('ws');
	var stage = getStageFromRssInstanceName(rssInstanceName);
	var getDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabaseUsers";

	var payload ='<ser:getDatabaseUsers  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
	'<ser:environmentName>' + rssInstanceName + '</ser:environmentName>' +
	'</ser:getDatabaseUsers>';

	var result;
	var databasesUsersArray=[];
	var permissionModule = jagg.module("permission");
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	var rssInstancesArray=[];
	var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE +stage);
	if(hasDBConfigurePermissionToStage){
		var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
		modManager.setAuthHeaders(options);
		getDatabaseUsersService.open(options, storageServerURL+'RSSAdmin', false);
		getDatabaseUsersService.send(payload);
		result = getDatabaseUsersService.responseE4X;
		var databaseUsers = rssFilter.getAllDatabaseUsers(applicationKey,stage,buildResponse(result, stage));
		var t=buildResponse(result, stage);
		for(var index in  databaseUsers){
			var databaseUser = databaseUsers[index];
			databasesUsersArray.push(databaseUser);

		}
	}
	return  databasesUsersArray;

};

var getStageFromRssInstanceName=function(rssInstanceName){
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	for(var i=0;i<deploymentStages.length;i++){
		var rssName= getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+RSS_NAME);
		if(rssInstanceName==rssName){
			return deploymentStages[i];
		}
	}

};

function buildResponse(result,stage){
	var databaseObject=[];
	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={
			};
			var entry=response[index];
			var name=entry.*::username.text();
			var rssInstanceName=entry.*::rssInstanceName.text();
			task.name=name;
			task.rssInstanceName=getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+RSS_NAME);
			databaseObject.push(task);
		}
	}
	return databaseObject;
};

var createDatabaseUser = function (applicationKey, password, rssInstance, username){

    //We do the name validation here.
    if(validateDatabaseUserName(applicationKey, rssInstance, username)){
        //This means that the user already exists
        var errorMessage = "User already exists in the environment";
        log.error(errorMessage);
        return errorMessage;
    }

    var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');
	var createDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:addDatabaseUser";
	var tenantId="-1234";
	options.robust = true;
	var payload ='<ser:addDatabaseUser xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
                 'xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">' +
	             '<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	             '<ser:user>' +
                 '<xsd:password>'+password+'</xsd:password>'+
	             '<xsd:rssInstanceName>'+getRssInstanceName(rssInstance)+'</xsd:rssInstanceName>'+
	             '<xsd:username>'+username+'</xsd:username>'+
                 '</ser:user>'+
                 '</ser:addDatabaseUser>';

	var result="";
	try {
		var storageUrl = getStorageServerUrl(rssInstance);
		modManager.setAuthHeaders(options);
		createDatabaseUsersService.open(options, storageUrl+'RSSAdmin', false);
		createDatabaseUsersService.send(payload);
		result = createDatabaseUsersService.responseE4X;
		var ns = new Namespace("http://service.core.rssmanager.carbon.wso2.org");
		var response=result.ns::["return"];
		var entry = response[0];
		var ax = new Namespace("http://dto.core.rssmanager.carbon.wso2.org/xsd");
		result = entry.ax::["username"].text();
		rssFilter.addDatabaseUser(result, applicationKey, stage);

        var correlationKey = applicationKey + "-" + stage + "-dbuser-" + username;

        try{
            var notificationTitle  = "Database user " + result + " created in " + stage;
            var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending create database user success notification \n" + e.message);
        }
	} catch (e) {
        try{
            var notificationTitle  = "Database user " + username + " creation failed in " + stage;
	        var notificationMessage = "In environment: " + stage + "due to " + e.javaException.cause;
            var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationKey, loggedInUser, notificationTitle, notificationMessage, correlationKey, "ERROR");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending create database failure notification \n" + e.message);
        }

           log.error('Error while creating database user :' + username);
           log.error(e);
           throw e;
	}

	return result;
};

/**
 * Get possible username for db user when the given username is exist
 * @param applicationKey - key of the application
 * @param rssInstance - rss instance
 * @param username - db username
 * @return db username
 */
var getPossibleUsername = function (applicationKey, rssInstance, username){
    var dbUserArray = getDatabaseUsersForRssInstance(applicationKey, rssInstance);
    var count = 0;
    var result = username;

    // check db users exist in the system starting with username
    var isUsersExist = false;
    for (var i=0; i<dbUserArray.length; i++) {
        var dbUsername = dbUserArray[i].name;
        if (dbUsername.startsWith(username)) {
            isUsersExist = true;
        }
    }

    // if users exist, generate new username, try 5 times
    if (isUsersExist) {
       result = generateUsername(dbUserArray, username);
    }

    return result;
};


/**
 * Generate db username adding 2 digits at the end
 * @param dbUserArray - array of exisitng db users
 * @param username - db username
 * @return db username
 */
var generateUsername = function (dbUserArray, username) {
    var newUsername = username;
    for(var j=0; j < 5 ; j++){
        var newUsername = username + Math.floor((Math.random() * 100) + 0);
        for (var i=0; i<dbUserArray.length; i++) {
            var dbUsername = dbUserArray[i].name;
            if (newUsername == dbUsername.substring(0, dbUsername.lastIndexOf('_'))) {
                break;
            }
        }
    }
    return newUsername;
};

/**
 * Check whether database username exist
 * @param applicationKey - application key
 * @param rssInstance - rss instance
 * @param username - db username
 * @return true if username exist
 */
var validateDatabaseUserName = function (applicationKey, rssInstance, username) {
    var stage = getStageFromRssInstanceName(rssInstance);

    var result = rssFilter.isDatabaseUserExists(applicationKey,stage,username);
    return result;
};

var getAvailableUsersToAttachToDatabase = function (applicationKey, dbname, rssInstance){
	var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');
	var getAvailableUsersToAttachToDatabaseService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getAvailableUsers";
	modManager.setAuthHeaders(options);
	var payload ='<ser:getAvailableUsers  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
	             '<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	             '<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>' +
	             '<ser:databaseName>'+dbname+'</ser:databaseName>'+
	             '</ser:getAvailableUsers>';

	var result;
	var users;
	try {
		getAvailableUsersToAttachToDatabaseService.open(options, getStorageServerUrl(rssInstance)+'RSSAdmin', false);
		getAvailableUsersToAttachToDatabaseService.send(payload);
		result = getAvailableUsersToAttachToDatabaseService.responseE4X;
        users=rssFilter.getAllDatabaseUsers(applicationKey,stage,buildResponse(result,stage));
	} catch (e) {
		log.error("Error while getting available users to attach to database \n" + e.message);
		throw "Error while getting available users to attach to database";
	}
	return buildResponseAsStringArray(users);
};

var deleteUser = function (applicationKey, name, rssInstanceName){
	var stage = getStageFromRssInstanceName(rssInstanceName);
	var ws = require('ws');
	var deleteDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:removeDatabaseUser";
	options.mep = "in-only"; //This will result in ignoring the error
	options.robust = true;
	modManager.setAuthHeaders(options);

	var payload ='<ser:removeDatabaseUser  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">'+
	'<ser:environmentName>' + rssInstanceName + '</ser:environmentName>' +
	'<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>' +
	'<ser:username>'+ name +'</ser:username></ser:removeDatabaseUser>';

	var result;
	try {
		deleteDatabaseUsersService.open(options, getStorageServerUrl(rssInstanceName)+'RSSAdmin', false);
		deleteDatabaseUsersService.send(payload);
		rssFilter.deleteDatabaseUser(name, applicationKey, stage);

        var correlationKey = applicationKey + "-" + stage + "-dbuser-" + name;
        try{
            var notificationTitle  = "Database user " + name + " deletion failed in " + stage;
            var eventBuilderInstance = EventBuilder.resourceDeletionCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending delete database user success notification \n" + e.message);
        }
	} catch (e) {
        try{
            var notificationTitle  = "Database user " + name + " delete failed in " + stage;
            var eventBuilderInstance = EventBuilder.resourceDeletionCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "ERROR");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending delete database user failure notification \n" + e.message);
        }
		log.error("Error while deleting user. User might be already attached to a database. \n" + e.message);
		throw "Error while deleting user";
	}
};


var getDatabaseUsers = function (applicationKey){
	var ws = require('ws');
	var getDatabaseUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabaseUsers";
	var result;
	var databasesUsersArray=[];
	var permissionModule = jagg.module("permission");
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	var rssInstancesArray=[];
	for(var i=0;i<deploymentStages.length;i++){
		//if user has access to stage
		var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE +deploymentStages[i]);
		if(hasDBConfigurePermissionToStage){
			var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+STORAGE_SERVER_URL);
			var options = new Array();
			options.useSOAP = 1.2;
			options.action = "urn:getDatabaseUsers";
			modManager.setAuthHeaders(options);

			var payload ='<ser:getDatabaseUsers  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
			'<ser:environmentName>' + deploymentStages[i] + '</ser:environmentName>' +
			'</ser:getDatabaseUsers>';

			getDatabaseUsersService.open(options, storageServerURL+'RSSAdmin', false);
			getDatabaseUsersService.send(payload);
			result = getDatabaseUsersService.responseE4X;
			var databaseUsers =rssFilter.getAllDatabaseUsers(applicationKey,deploymentStages[i],
			buildResponse(result,
			deploymentStages[i]));
			for(var index in  databaseUsers){
				var databaseUser = databaseUsers[index];
				databasesUsersArray.push(databaseUser);
			}
		}
	}
	return  databasesUsersArray;
};

var buildResponseAsStringArray = function(result){
        var databaseObject=[];
        if(result!=undefined){
                for(index in result){
                        databaseObject.push(result[index].name);
                }
        }
        return databaseObject;
};


%>




