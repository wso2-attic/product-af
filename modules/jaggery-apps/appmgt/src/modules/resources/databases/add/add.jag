<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
include("/jagg/correlationKeys.jag");


var log = new Log('modules/resources/databases/add/add.jag');

var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.ResourceRelatedEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;

var modManager = jagg.module("manager");
var wso2_rss_instanceName = 'SYSTEM';
var rssFilter=jagg.module("rss-filter");
var loggedInUser = jagg.getUser();
String.prototype.startsWith = function (str){
	return this.indexOf(str) == 0;
};

/**
 * Create database
 * @param applicationKey - key of the application
 * @param databaseName - name of the database
 * @param databaseServerInstanceName - name of the database server instance
 * @param databaseDescription - description of the database
 * @return name of the database.
 */
var createDatabase = function (applicationKey, databaseName, databaseServerInstanceName, databaseDescription) {
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');
	var createDatabaseService = new ws.WSRequest();
	var options =new Array();
	options.useSOAP = 1.2;
	options.action = "urn:addDatabase";
	options.robust = true;
	var result="";

	var payload ='<ser:addDatabase xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
	'xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:environmentName>' + databaseServerInstanceName + '</ser:environmentName>' +
	'<ser:database>'+
	'<xsd:name>'+ databaseName +'</xsd:name>'+
	'<xsd:rssInstanceName>'+ wso2_rss_instanceName +'</xsd:rssInstanceName>'+
	'</ser:database>'+
	'</ser:addDatabase>';
	

	try {
		var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
		modManager.setAuthHeaders(options);
		createDatabaseService.open(options, storageServerURL+"RSSAdmin", false);
		createDatabaseService.send(payload);
		result = createDatabaseService.responseE4X;
		var ns = new Namespace("http://service.core.rssmanager.carbon.wso2.org");
		var response=result.ns::["return"];
		var entry = response[0];
		var ax = new Namespace("http://dto.core.rssmanager.carbon.wso2.org/xsd");
		result=entry.ax::["name"].text();
        //result is database name
        rssFilter.addDatabase(result, applicationKey, stage, databaseDescription);
        try{
            var notificationTitle  = "Database " + databaseName + " added";
            var correlationKey = dbCorrelationKey(applicationKey, databaseName, stage);
            var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationKey, loggedInUser, notificationTitle, "" ,correlationKey, "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending create database success notification \n" + e.message);
        }
	} catch (e) {
        try{
            var notificationTitle  = "Failed to add database " + databaseName;
            var correlationKey = dbCorrelationKey(applicationKey, stage, databaseName);
            var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey , "ERROR");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending create database failure notification \n" + e.message);
        }
		log.error("Error while creating database "+ "\n" + e.message);
		//throw "Error while creating database  ";
		result = "" + e.javaException.cause;
	}

	return result;
};
//TODO:remove this method if it not used // marked for deletion
var createDatabaseWithAttachedUsers = function (applicationKey,databaseName,databaseServerInstanceName, isDefaultPass, userPassword) {

	if(isDefaultPass  == 'true'){
		userPassword = getProperty(RSS_DB_USER_DEFAULT_PASSWORD);
	}
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');
	var createDatabaseService = new ws.WSRequest();
	var options =new Array();
	options.useSOAP = 1.2;
	options.action = "urn:createDatabaseWithAttachedUsers";
	var tenantId="-1234";

	var payload ='<ser:createDatabase xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
	' xmlns:xsd="http://environment.config.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:ctx>' +
	'<xsd:environmentName>' + databaseServerInstanceName + '</xsd:environmentName>' +
	'<xsd:rssInstanceName>' + wso2_rss_instanceName + '</xsd:rssInstanceName>' +
	'</ser:ctx>' +
	'<ser:user><xsd:password>'+userPassword+'</xsd:password>'+
	'<xsd:rssInstanceName>'+wso2_rss_instanceName+'</xsd:rssInstanceName>'+
	'<xsd:tenantId>'+tenantId+'</xsd:tenantId>'+
	'<xsd:type></xsd:type>'+
	'<xsd:username>'+databaseName+'</xsd:username></ser:user>' +
	'<ser:template>'+
	'<xsd:name>'+databaseName+'@'+databaseServerInstanceName+'</xsd:name>'+
	'<xsd:privileges>'+
	'<xsd:alterPriv>Y</xsd:alterPriv>'+
	'<xsd:alterRoutinePriv>Y</xsd:alterRoutinePriv>'+
	'<xsd:createPriv>Y</xsd:createPriv>'+
	'<xsd:createRoutinePriv>Y</xsd:createRoutinePriv>'+
	'<xsd:createTmpTablePriv>Y</xsd:createTmpTablePriv>'+
	'<xsd:createViewPriv>Y</xsd:createViewPriv>'+
	'<xsd:deletePriv>Y</xsd:deletePriv>'+
	'<xsd:dropPriv>Y</xsd:dropPriv>'+
	'<xsd:eventPriv>Y</xsd:eventPriv>'+
	'<xsd:executePriv>Y</xsd:executePriv>'+
	'<xsd:grantPriv>Y</xsd:grantPriv>'+
	'<xsd:indexPriv>Y</xsd:indexPriv>'+
	'<xsd:insertPriv>Y</xsd:insertPriv>'+
	'<xsd:lockTablesPriv>Y</xsd:lockTablesPriv>'+
	'<xsd:referencesPriv>Y</xsd:referencesPriv>'+
	'<xsd:selectPriv>Y</xsd:selectPriv>'+
	'<xsd:showViewPriv>Y</xsd:showViewPriv>'+
	'<xsd:triggerPriv>Y</xsd:triggerPriv>'+
	'<xsd:updatePriv>Y</xsd:updatePriv>'+
	'</xsd:privileges>'+
	' <xsd:tenantId>'+tenantId+'</xsd:tenantId>'+
	'</ser:template>' +
	'<ser:database>'+
	'<xsd:name>'+ databaseName +'</xsd:name>'+
	'<xsd:rssInstanceName>'+ wso2_rss_instanceName +'</xsd:rssInstanceName>'+
	'</ser:database>'+
	'</ser:createDatabase>';
	var result;
	try {
		var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
		modManager.setAuthHeaders(options);
		createDatabaseService.open(options, storageServerURL+"RSSAdmin", false);
		createDatabaseService.send(payload);
		result = createDatabaseService.responseE4X;
		result = result.*::["return"].text();
	} catch (e) {
		log.error("Error while creating database "+ "\n" + e.message);
		throw e;
	}
	return result;
};
//TODO:remove this method if it not used //marked for deletion
var createDbWithUserAndTemplate = function (applicationKey,databaseName,userName,templateName,databaseServerInstanceName, userPassword, alterPriv,alterRoutinePriv, createPriv,createRoutinePriv, createTmpTablePriv, createViewPriv,deletePriv,dropPriv,eventPriv,executePriv,grantPriv,indexPriv,insertPriv,lockTablesPriv,referencesPriv,selectPriv,showViewPriv,triggerPriv,updatePriv) {
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');
	var createDatabaseService = new ws.WSRequest();
	var options =new Array();
	options.useSOAP = 1.2;
	options.action = "urn:createDatabaseWithAttachedUsers";
	var tenantId="-1234";

	var payload ='<ser:createDatabase xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
	'xmlns:xsd="http://environment.config.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:ctx>' +
	'<xsd:environmentName>' + databaseServerInstanceName + '</xsd:environmentName>' +
	'<xsd:rssInstanceName>' + wso2_rss_instanceName + '</xsd:rssInstanceName>' +
	'</ser:ctx>' +
	'<ser:user><xsd:password>'+userPassword+'</xsd:password>'+
	'<xsd:rssInstanceName>'+wso2_rss_instanceName+'</xsd:rssInstanceName>'+
	'<xsd:tenantId>'+tenantId+'</xsd:tenantId>'+
	'<xsd:type></xsd:type>'+
	'<xsd:username>'+userName+'</xsd:username></ser:user>' +
	'<ser:template>'+
	'<xsd:name>'+templateName+'@'+databaseServerInstanceName+'</xsd:name>'+
	'<xsd:privileges>'+
	'<xsd:alterPriv>'+alterPriv+'</xsd:alterPriv>'+
	'<xsd:alterRoutinePriv>'+alterRoutinePriv+'</xsd:alterRoutinePriv>'+
	'<xsd:createPriv>'+createPriv+'</xsd:createPriv>'+
	'<xsd:createRoutinePriv>'+createRoutinePriv+'</xsd:createRoutinePriv>'+
	'<xsd:createTmpTablePriv>'+createTmpTablePriv+'</xsd:createTmpTablePriv>'+
	'<xsd:createViewPriv>'+createViewPriv+'</xsd:createViewPriv>'+
	'<xsd:deletePriv>'+deletePriv+'</xsd:deletePriv>'+
	'<xsd:dropPriv>'+dropPriv+'</xsd:dropPriv>'+
	'<xsd:eventPriv>'+eventPriv+'</xsd:eventPriv>'+
	'<xsd:executePriv>'+executePriv+'</xsd:executePriv>'+
	'<xsd:grantPriv>'+grantPriv+'</xsd:grantPriv>'+
	'<xsd:indexPriv>'+indexPriv+'</xsd:indexPriv>'+
	'<xsd:insertPriv>'+insertPriv+'</xsd:insertPriv>'+
	'<xsd:lockTablesPriv>'+lockTablesPriv+'</xsd:lockTablesPriv>'+
	'<xsd:referencesPriv>'+referencesPriv+'</xsd:referencesPriv>'+
	'<xsd:selectPriv>'+selectPriv+'</xsd:selectPriv>'+
	'<xsd:showViewPriv>'+showViewPriv+'</xsd:showViewPriv>'+
	'<xsd:triggerPriv>'+triggerPriv+'</xsd:triggerPriv>'+
	'<xsd:updatePriv>'+updatePriv+'</xsd:updatePriv>'+
	'</xsd:privileges>'+
	' <xsd:tenantId>'+tenantId+'</xsd:tenantId>'+
	'</ser:template>' +
	'<ser:database>'+
	'<xsd:name>'+ databaseName +'</xsd:name>'+
	'<xsd:rssInstanceName>'+ wso2_rss_instanceName +'</xsd:rssInstanceName>'+
	'</ser:database>'+
	'</ser:createDatabase>';
	var result;
	try {
		var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
		modManager.setAuthHeaders(options);
		createDatabaseService.open(options, storageServerURL+"RSSAdmin", false);
		createDatabaseService.send(payload);
		result = createDatabaseService.responseE4X;
		result = result.*::["return"].text();
	} catch (e) {
		log.error("Error while creating database "+ "\n" + e.message);
		throw e;
	}
	return result;
};

var getRSSinstances = function (applicationKey){
	var result;
	var permissionModule = jagg.module("permission");
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	var rssInstancesArray=[];
	for(var i=0;i<deploymentStages.length;i++){
		//if user has access to stage
		var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE +deploymentStages[i]);
		if(hasDBConfigurePermissionToStage){
			var task={
			};
			task.name=getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+RSS_NAME);
			rssInstancesArray.push(task);
		}
	}
	return rssInstancesArray;

};
var getRSSinstanceInStage = function (applicationKey,deploymentStage){
        var result;
        var permissionModule = jagg.module("permission");
        var rssInstance={};
        rssInstance.name=getProperty(DEPLOYMENT_STAGES+'.'+deploymentStage+'.'+RSS_NAME);
        return rssInstance;
};

var getStageFromRssInstanceName=function(rssInstanceName){
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	for(var i=0;i<deploymentStages.length;i++){
		var rssName= getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+RSS_NAME);
		if(rssInstanceName==rssName){
			return deploymentStages[i];
		}
	}
};

var getAttachedUsers = function (applicationKey, dbname, rssInstance){
	var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');
	var getAttachedUsersService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getAttachedUsers";
	var payload ='<ser:getAttachedUsers xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	'<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>' +
	'<ser:databaseName>'+dbname+'</ser:databaseName>'+
	'</ser:getAttachedUsers>';
	
	var result;
	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {
		getAttachedUsersService.open(options, storageServerURL+'RSSAdmin', false );
		getAttachedUsersService.send(payload);
		result = getAttachedUsersService.responseE4X;
	} catch (e) {
		log.error("Error while getting the attached users \n" + e.message);
		throw "Error while getting the attached users.";
	}
	return getUserList(result);
};

var attachNewUser = function (applicationKey,rssInstance, dbname, users, templates){
	var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');

	var attachUserService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:attachUser";
	options.mep = "in-only";
	options.robust = true;

	var payload ='<ser:attachUser  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	'<ser:ude>' +
        '<xsd:databaseName>'+dbname+'</xsd:databaseName>'+     
        '<xsd:rssInstanceName>' + wso2_rss_instanceName + '</xsd:rssInstanceName>' +
	'<xsd:username>'+users+'</xsd:username>'+	
	'</ser:ude>' +
	'<ser:templateName>'+templates+'</ser:templateName>' +
    '</ser:attachUser>';

	var result="";

	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {

		attachUserService.open(options, storageServerURL+'RSSAdmin', false);
		attachUserService.send(payload);
		result = "success";
	} catch (e) {
		//log.error("Error while attaching a new user \n" + e.message);
		// throw "Error while attaching a new user";
		//result = ""+e.javaException.cause;
	}

	return result;

};


var detachUser = function (applicationKey,rssInstance, dbname, username){
	var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');

	var detachUserService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:detachUser";
	options.mep = "in-only";
	var payload ='<ser:detachUser xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
        '<ser:ude>' +
	'<xsd:databaseName>'+dbname+'</xsd:databaseName>'+
	'<xsd:rssInstanceName>' + wso2_rss_instanceName + '</xsd:rssInstanceName>' +
	'<xsd:username>'+username+'</xsd:username>'+
        '</ser:ude>' +
	'</ser:detachUser>';
	
	var result;

	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {

		detachUserService.open(options, storageServerURL+'RSSAdmin', false);
		detachUserService.send(payload);
		result = true;//since detachUserService.responseE4X is null;
	} catch (e) {
		log.error("Error while detaching a user \n" + e.message);
		throw "Error while detaching a user";
	}
	return result;
};

var getUserPrivileges = function (applicationKey,rssInstance, dbname, username){
	var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');

	var getUserPrivilegesService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getUserDatabasePrivileges";
	var payload ='<ser:getUserDatabasePrivileges xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd">'+
	'<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	'<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>' +
	'<ser:databaseName>'+dbname+'</ser:databaseName>'+
	'<ser:username>'+username+'</ser:username>'+
	'</ser:getUserDatabasePrivileges>';

	var result;

	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {

		getUserPrivilegesService.open(options, storageServerURL+'RSSAdmin', false);
		getUserPrivilegesService.send(payload);
		result = getUserPrivilegesService.responseE4X;
	} catch (e) {
		log.error("Error while getting user privileges \n" + e.message);
		throw "Error while getting user privileges";
	}

	return buildUserPrivilege(result);
};


var editUserPermissions = function (applicationKey,dbname,rssInstance,username,alterPriv,alterRoutinePriv, createPriv,createRoutinePriv, createTmpTablePriv, createViewPriv,deletePriv,dropPriv,eventPriv,executePriv,grantPriv,indexPriv,insertPriv,lockTablesPriv,referencesPriv,selectPriv,showViewPriv,triggerPriv,updatePriv){
	var stage = getStageFromRssInstanceName(rssInstance);
	var ws = require('ws');

	var editTemplateService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.mep = "in-only";
	options.action = "urn:updateDatabaseUserPrivileges";

	var payload ='<ser:updateDatabaseUserPrivileges xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' + 
                     'xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'+
	'<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	'<ser:privileges xsi:type="xsd:MySQLPrivilegeSetInfo">'+
	'<xsd:alterPriv>'+alterPriv+'</xsd:alterPriv>'+
	'<xsd:createPriv>'+createPriv+'</xsd:createPriv>'+
        '<xsd:deletePriv>'+deletePriv+'</xsd:deletePriv>'+
	'<xsd:dropPriv>'+dropPriv+'</xsd:dropPriv>'+
	'<xsd:indexPriv>'+indexPriv+'</xsd:indexPriv>'+
	'<xsd:insertPriv>'+insertPriv+'</xsd:insertPriv>'+
	'<xsd:selectPriv>'+selectPriv+'</xsd:selectPriv>'+
	'<xsd:updatePriv>'+updatePriv+'</xsd:updatePriv>'+
	'<xsd:createRoutinePriv>'+createRoutinePriv+'</xsd:createRoutinePriv>'+
	'<xsd:createTmpTablePriv>'+createTmpTablePriv+'</xsd:createTmpTablePriv>'+
	'<xsd:createViewPriv>'+createViewPriv+'</xsd:createViewPriv>'+
    '<xsd:alterRoutinePriv>'+alterRoutinePriv+'</xsd:alterRoutinePriv>'+	
	'<xsd:eventPriv>'+eventPriv+'</xsd:eventPriv>'+
	'<xsd:executePriv>'+executePriv+'</xsd:executePriv>'+
	'<xsd:grantPriv>'+grantPriv+'</xsd:grantPriv>'+
	'<xsd:lockTablesPriv>'+lockTablesPriv+'</xsd:lockTablesPriv>'+
	'<xsd:referencesPriv>'+referencesPriv+'</xsd:referencesPriv>'+
	'<xsd:showViewPriv>'+showViewPriv+'</xsd:showViewPriv>'+
	'<xsd:triggerPriv>'+triggerPriv+'</xsd:triggerPriv>'+
	'</ser:privileges>'+
	'<ser:user>'+
	'<xsd:name>'+username+'</xsd:name>'+
	'<xsd:rssInstanceName>'+wso2_rss_instanceName+'</xsd:rssInstanceName>'+
	'</ser:user>'+
	'<ser:databaseName>'+dbname+'</ser:databaseName>'+
	'</ser:updateDatabaseUserPrivileges>';



	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {

		editTemplateService.open(options, storageServerURL+'RSSAdmin', false);
		editTemplateService.send(payload);
        var correlationKey = dbPrivilegeCorrelationKey(applicationKey, stage, dbname, username);
        try{
            var notificationTitle  = "Privileges updated for database " + dbname ;
            var notificationMessageDescription = "For user: " + username + " in environment: " + stage;
            var eventBuilderInstance = EventBuilder.resourceUpdateCompletionEvent(applicationKey, loggedInUser, notificationTitle, notificationMessageDescription, correlationKey, "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending database user privilege update success notification \n" + e.message);
        }


	} catch (e) {
        try{
            var notificationTitle  = "Privileges update failed for " + dbname ;
            var notificationMessageDescription = "For user: " + username + " in " + stage + " environment";
            var eventBuilderInstance = EventBuilder.resourceUpdateCompletionEvent(applicationKey, loggedInUser, notificationTitle, notificationMessageDescription, correlationKey, "ERROR");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending database user privilege update failure notification \n" + e.message);
        }

		log.error("Error while editing user permissions \n" + e.message);
		throw "Error while editing user permissions.";
	}

};

var getDatabaseUrl = function (applicationKey,stage,databaseName){
	var ws = require('ws');
	var getDatabaseRequest = new ws.WSRequest();
	var result = null;
	var permissionModule = jagg.module("permission");
	
	var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE + stage);
	if(hasDBConfigurePermissionToStage){
			var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+ stage +'.'+STORAGE_SERVER_URL);
			var options = new Array();
			options.useSOAP = 1.2;
			options.action = "urn:getDatabase";
			modManager.setAuthHeaders(options);
			var payload ='<ser:getDatabase  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
			'<ser:environmentName>' + stage + '</ser:environmentName>'  +
			'<ser:rssInstanceName>' + wso2_rss_instanceName + '</ser:rssInstanceName>'  +
			'<ser:databaseName>' + databaseName + '</ser:databaseName>' +
			'</ser:getDatabase>';
		
			getDatabaseRequest.open(options, storageServerURL+'RSSAdmin', false);
			getDatabaseRequest.send(payload);
			var response = getDatabaseRequest.responseE4X;
			
			if(response != undefined){
				response=response.*::["return"];
				result = response.*::url.text();
			}
	}
	
	return result;
};



var getDatabases = function (applicationKey){
	var ws = require('ws');
	var getDatabaseService = new ws.WSRequest();
	var result;
	var databasesObjectArray=[];
	var permissionModule = jagg.module("permission");
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	var rssInstancesArray=[];
	for(var i=0;i<deploymentStages.length;i++){
		//if user has access to stage
		var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE +deploymentStages[i]);
		if(hasDBConfigurePermissionToStage){
			var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+STORAGE_SERVER_URL);
			var options = new Array();
			options.useSOAP = 1.2;
			options.action = "urn:getDatabases";
			modManager.setAuthHeaders(options);
			var payload ='<ser:getDatabases  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
			'<ser:environmentName>' + deploymentStages[i] + '</ser:environmentName>' +
			'</ser:getDatabases>';
			
			getDatabaseService.open(options, storageServerURL+'RSSAdmin', false);
			getDatabaseService.send(payload);
			result = getDatabaseService.responseE4X;
			var databaseObjects = rssFilter.getAllDatabases(applicationKey,deploymentStages[i],
                                  		buildResponse(result, deploymentStages[i],
                                  		applicationKey));
			for(var index in  databaseObjects){
				var databaseObject = databaseObjects[index];
				databasesObjectArray.push(databaseObject);
			}
		}
	}
	return  databasesObjectArray;
};



var getDatabasesForStage = function (applicationKey, stage){
	var ws = require('ws');

	var getDatabaseService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabases";

	var result;
	var databasesObjectArray=[];
	var permissionModule = jagg.module("permission");
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	var rssInstancesArray=[];
	//if user has access to stage
		var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
		modManager.setAuthHeaders(options);
		
		var payload ='<ser:getDatabases  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
		'<ser:environmentName>' + stage + '</ser:environmentName>' +
		'</ser:getDatabases>';
		
		getDatabaseService.open(options, storageServerURL+'RSSAdmin', false);
		getDatabaseService.send(payload);
		result = getDatabaseService.responseE4X;
		var databaseObjects = rssFilter.getAllDatabases(applicationKey,stage,
		buildResponse(result, stage, applicationKey));
        return databaseObjects;

};
// this method provides list of databases, attached users
var getDatabasesInfoForStage = function(applicationKey, stage) {
    var ws = require('ws');
    var getDatabaseService = new ws.WSRequest();
    var result;

    var infoObj = {};

    rssInstanceName = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+RSS_NAME);
    var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getDatabases";
    modManager.setAuthHeaders(options);
            
    var payload = '<ser:getDatabases xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +	
	'<ser:environmentName>' + stage + '</ser:environmentName>' +
	'</ser:getDatabases>';        
            
    getDatabaseService.open(options, storageServerURL+'RSSAdmin', false);
    getDatabaseService.send(payload);
    result = getDatabaseService.responseE4X;
    if(result != undefined) {
        var response=result.*::["return"];
        var dbs = [];
        for(var index in response) {
            var db = {
            };
            db.dbName = response[index].*::name.text();
            db.url = response[index].*::url.text();
            dbs.push(db);
        }

        var filteredDbs = rssFilter.getAllDatabases(applicationKey,stage,dbs);
        if(filteredDbs!=null && filteredDbs.length> 0){
            infoObj.stage = stage;
            infoObj.dbs= filteredDbs;
            for(var dbIndex in infoObj.dbs){
                var attachedUsers =  getAttachedUsers(applicationKey, infoObj.dbs[dbIndex].dbName, rssInstanceName);
                infoObj.dbs[dbIndex].attachedUsers=attachedUsers;
                infoObj.dbs[dbIndex].custom=false;
            }
        }

    }

    return infoObj;
};

var getDbUserTemplateInfoForStage = function(applicationKey, stage) {
	var ws = require('ws');
	var getDatabaseService = new ws.WSRequest();
	var result;

	var infoObj = {
	};
	infoObj.stage = stage;
	rssInstanceName = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+RSS_NAME);
	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabases";
	modManager.setAuthHeaders(options);
	
	var payload = '<ser:getDatabases xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +	
	'<ser:environmentName>' + stage + '</ser:environmentName>' +
	'</ser:getDatabases>';
		
	getDatabaseService.open(options, storageServerURL+'RSSAdmin', false);
	getDatabaseService.send(payload);
	result = getDatabaseService.responseE4X;
	if(result != undefined) {
		var response=result.*::["return"];
		var dbs = [];
		for(var index in response) {
			var db = {};
			db.dbName = response[index].*::name.text();
			db.url = response[index].*::url.text();
			dbs.push(db);
		}
        infoObj.dbs=rssFilter.getAllDatabases(applicationKey,infoObj.stage,dbs);
	}
	var rssMod = jagg.module("resources");
	var users = rssMod.getDatabaseUsersForRssInstance(applicationKey, rssInstanceName);
	infoObj.users = users;

	var templates = rssMod.getAvailableTemplatesToAttachToDatabase(applicationKey, rssInstanceName);
	infoObj.templates = templates;
	return infoObj;
};


var getDatabaseInfoUrl = function(stage) {
	var storageServerURL = getProperty(DEPLOYMENT_STAGES + '.' + stage + '.' + STORAGE_SERVER_URL);
	return storageServerURL;
}

function buildResponse(result,stage,applicationKey){
	var databaseObject=[];

	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={
			};
			var entry=response[index];
			var name=entry.*::name.text();
			var rssInstanceName=entry.*::rssInstanceName.text();
			var url=entry.*::url.text();
			task.dbName=name;
			task.rssInstanceName=getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+RSS_NAME);
			task.url = url;
			databaseObject.push(task);
		}
	}
	return databaseObject;
}

function buildRssInstances(result){
	var databaseObject=[];
	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={
			};
			var entry=response[index];
			var name=entry.*::name.text();
			task.name=name;
			databaseObject.push(task);
		}
	}
	return databaseObject;
}


function getUserList(result){
	var databaseObject=[];
	if(result != undefined){
		var ns = new Namespace("http://service.core.rssmanager.carbon.wso2.org");
		var response=result.ns::["return"];
		for(var index=0; index < response.length();index++){
			var entry = response[index];
			var ax = new Namespace("http://dto.core.rssmanager.carbon.wso2.org/xsd");
			var username=entry.ax::["username"].text();
			databaseObject.push(username);
		}
	}
	return databaseObject;
}

function buildUserPrivilege(result){
	var databaseObject=[];
	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={
			};
			var privilages=response[index];
			var alterPriv=privilages.*::alterPriv.text();
			var alterRoutinePriv=privilages.*::alterRoutinePriv.text();
			var createPriv=privilages.*::createPriv.text();
			var createRoutinePriv=privilages.*::createRoutinePriv.text();
			var createTmpTablePriv=privilages.*::createTmpTablePriv.text();
			var createViewPriv=privilages.*::createViewPriv.text();
			var deletePriv=privilages.*::deletePriv.text();
			var dropPriv=privilages.*::dropPriv.text();
			var eventPriv=privilages.*:: eventPriv.text();
			var executePriv=privilages.*::executePriv.text();
			var grantPriv=privilages.*::grantPriv.text();
			var indexPriv=privilages.*::indexPriv.text();
			var insertPriv=privilages.*::insertPriv.text();
			var lockTablesPriv=privilages.*::lockTablesPriv.text();
			var referencesPriv=privilages.*::referencesPriv.text();
			var selectPriv=privilages.*::selectPriv.text();
			var showViewPriv=privilages.*::showViewPriv.text();
			var triggerPriv=privilages.*::triggerPriv.text();
			var updatePriv=privilages.*::updatePriv.text();

			task.alterPriv=alterPriv;
			task.alterRoutinePriv=alterRoutinePriv;
			task.createPriv=createPriv;
			task.createRoutinePriv=createRoutinePriv;
			task.createTmpTablePriv=createTmpTablePriv;
			task.createViewPriv=createViewPriv;
			task.deletePriv=deletePriv;
			task.dropPriv=dropPriv;
			task.eventPriv=eventPriv;
			task.executePriv=executePriv;
			task.grantPriv=grantPriv;
			task.indexPriv=indexPriv;
			task.insertPriv=insertPriv;
			task.lockTablesPriv=lockTablesPriv;
			task.referencesPriv=referencesPriv;
			task.selectPriv=selectPriv;
			task.showViewPriv=showViewPriv;
			task.triggerPriv=triggerPriv;
			task.updatePriv=updatePriv;

			databaseObject.push(task);
		}
	}
	return databaseObject;

}


/**
 * Get all databases info from App Factory database
 * @param applicationKey - key of the application
 * @param stage - stage
 * @return array of database information
 */
var getAllDatabasesInfo = function (applicationKey, stage) {
    return rssFilter.getAllDatabasesInfo(applicationKey, stage);
};
%>
