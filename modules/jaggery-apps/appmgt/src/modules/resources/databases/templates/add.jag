<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");


var log = new Log('modules/resources/databases/templates/add.jag');
var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.ResourceRelatedEventBuilderUtil;
var EventNotifier = Packages.org.wso2.carbon.appfactory.eventing.EventNotifier;
var loggedInUser = jagg.getUser();
var modManager = jagg.module("manager");
var wso2_rss_instanceName = 'SYSTEM';
var rssFilter=jagg.module("rss-filter");

var getStageFromRssInstanceName=function(rssInstanceName){
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	for(var i=0;i<deploymentStages.length;i++){
		var rssName= getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+RSS_NAME);
		if(rssInstanceName==rssName){
			return deploymentStages[i];
		}
	}

};
var dropTemplate = function (applicationKey,databaseServerInstanceName,name){
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');

	var dropDatabaseTemplate = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:removeDatabasePrivilegeTemplate";
	options.mep = "in-only";

	var payload ='<ser:removeDatabasePrivilegeTemplate  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
	'<ser:environmentName>' + databaseServerInstanceName + '</ser:environmentName>' +
	'<ser:templateName>'+name+'</ser:templateName></ser:removeDatabasePrivilegeTemplate>';

	var result;

	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {

		dropDatabaseTemplate.open(options, storageServerURL+'RSSAdmin', false);
		dropDatabaseTemplate.send(payload);
        rssFilter.deleteDatabaseTemplate( rssFilter.getEnvironmentAwareTemplateName(name),
        applicationKey, stage);
        var correlationKey = applicationKey + "-" + stage + "-template-" + name;
        try{
            var notificationTitle  = "Database template " + name + " deleted from " + stage;
            var eventBuilderInstance = EventBuilder.resourceDeletionCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "INFO");
        } catch (e) {
            log.error("Error while sending delete db template success notification \n" + e.message);
        }

	} catch (e) {
        try{
            var notificationTitle  = "Database template " + name + " deletion failed in " + stage;
            var eventBuilderInstance = EventBuilder.resourceDeletionCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "ERROR");
        } catch (e) {
            log.error("Error while sending delete database success notification \n" + e.message);
        }

		log.error("Error while dropping a template \n" + e.message);
		throw "Error while dropping a template";
	}

};

//this could be a redundant method and its not doing what method name implies.
var editTemplate = function (applicationKey, name,databaseServerInstanceName){
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');

	var editDatabaseTemplate = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabasePrivilegeTemplate";
	
	var payload ='<ser:getDatabasePrivilegeTemplate xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
	'<ser:environmentName>' + databaseServerInstanceName + '</ser:environmentName>' +
	'<ser:templateName>'+name+'</ser:templateName></ser:getDatabasePrivilegeTemplate>';

	var result;
	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {

		editDatabaseTemplate.open(options, storageServerURL+'RSSAdmin', false);
		editDatabaseTemplate.send(payload);
		result = editDatabaseTemplate.responseE4X;

	} catch (e) {
		log.error("Error while editing a template \n" + e.message);
		throw "Error while editing a template";
	}
	return buildTemplate(result);

};


var createTemplate = function (applicationKey,databaseServerInstanceName,name,alterPriv,alterRoutinePriv, createPriv,createRoutinePriv, createTmpTablePriv, createViewPriv,deletePriv,dropPriv,eventPriv,executePriv,grantPriv,indexPriv,insertPriv,lockTablesPriv,referencesPriv,selectPriv,showViewPriv,triggerPriv,updatePriv,autoCreation,copyToAll){
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');
	var createTemplateService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.mep = "in-only";
	options.action = "urn:addDatabasePrivilegeTemplate";
	var tenantId="-1234";
	options.robust = true;
	var result={};
	var allStages=getProperties(DEPLOYMENT_STAGES);
	
	var paylod_permissions= '<xsd:privileges xsi:type="xsd:MySQLPrivilegeSetInfo">'+
							'<xsd:alterPriv>'+alterPriv+'</xsd:alterPriv>'+
							'<xsd:createPriv>'+createPriv+'</xsd:createPriv>'+
							'<xsd:deletePriv>'+deletePriv+'</xsd:deletePriv>'+
							'<xsd:dropPriv>'+dropPriv+'</xsd:dropPriv>'+
							'<xsd:indexPriv>'+indexPriv+'</xsd:indexPriv>'+
							'<xsd:insertPriv>'+insertPriv+'</xsd:insertPriv>'+
							'<xsd:selectPriv>'+selectPriv+'</xsd:selectPriv>'+
							'<xsd:updatePriv>'+updatePriv+'</xsd:updatePriv>'+
							'<xsd:alterRoutinePriv>'+alterRoutinePriv+'</xsd:alterRoutinePriv>'+
							'<xsd:createRoutinePriv>'+createRoutinePriv+'</xsd:createRoutinePriv>'+
							'<xsd:createTmpTablePriv>'+createTmpTablePriv+'</xsd:createTmpTablePriv>'+
							'<xsd:createViewPriv>'+createViewPriv+'</xsd:createViewPriv>'+
							'<xsd:eventPriv>'+eventPriv+'</xsd:eventPriv>'+
							'<xsd:executePriv>'+executePriv+'</xsd:executePriv>'+
							'<xsd:grantPriv>'+grantPriv+'</xsd:grantPriv>'+
							'<xsd:lockTablesPriv>'+lockTablesPriv+'</xsd:lockTablesPriv>'+
							'<xsd:referencesPriv>'+referencesPriv+'</xsd:referencesPriv>'+
							'<xsd:showViewPriv>'+showViewPriv+'</xsd:showViewPriv>'+
							'<xsd:triggerPriv>'+triggerPriv+'</xsd:triggerPriv>'+
							'</xsd:privileges>'+
							'</ser:template></ser:addDatabasePrivilegeTemplate>';
	if(autoCreation || !copyToAll ){
				allStages=[];
				allStages.push(getStageFromRssInstanceName(databaseServerInstanceName));
			}
	var EnvUnawareName=rssFilter.getEnvironmentAwareTemplateName(name);
	for(var tempStage in allStages){
		stage=allStages[tempStage];
		var templateName=EnvUnawareName+"@"+stage;
		var payload_stage ='<ser:addDatabasePrivilegeTemplate xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' +
		                     'xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'+
		                     '<ser:environmentName>' + stage + '</ser:environmentName>'+
							 '<ser:template>'+
							 '<xsd:name>'+templateName+'</xsd:name>';
		var payload=payload_stage+paylod_permissions;
		var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
		modManager.setAuthHeaders(options);
		try {
			
			createTemplateService.open(options, storageServerURL+'RSSAdmin', false);
			createTemplateService.send(payload);
			rssFilter.addDatabaseTemplate(EnvUnawareName,applicationKey,stage);
			result[stage] = "success";
            var correlationKey = applicationKey + "-" + stage + "-template-" + EnvUnawareName;
            try{
                var notificationTitle  = "Database template " + EnvUnawareName + " created in " + stage;
                var notificationMessage = "In environment: " + stage;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationKey, loggedInUser, notificationTitle, notificationMessage, correlationKey, "INFO");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending create db template success notification \n" + e.message);
            }
		} catch (e) {
            try{
                var notificationTitle  = "Database template " + EnvUnawareName + " creation failed in " + stage;
                var eventBuilderInstance = EventBuilder.resourceCreationCompletedEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "ERROR");
                var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
            } catch (e) {
                log.error("Error while sending create db template failure notification \n" + e.message);
            }
			log.error("Error while creating a template \n" + e.message);
			//throw "Error while creating a template";
			//result = ""+e.javaException.cause;
			result[stage]="failed";
		}
	}
	return result;
};

var editDbTemplate = function (applicationKey,databaseServerInstanceName,name,alterPriv,alterRoutinePriv, createPriv,createRoutinePriv, createTmpTablePriv, createViewPriv,deletePriv,dropPriv,eventPriv,executePriv,grantPriv,indexPriv,insertPriv,lockTablesPriv,referencesPriv,selectPriv,showViewPriv,triggerPriv,updatePriv){
	var stage = getStageFromRssInstanceName(databaseServerInstanceName);
	var ws = require('ws');

	var editTemplateService = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.mep = "in-only";
	options.action = "urn:editDatabasePrivilegesTemplate";


	var payload ='<ser:updateDatabasePrivilegeTemplate xmlns:ser="http://service.core.rssmanager.carbon.wso2.org" ' + 
	             'xmlns:xsd="http://dto.core.rssmanager.carbon.wso2.org/xsd" ' + 
	             'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'+
	'<ser:environmentName>' + databaseServerInstanceName + '</ser:environmentName>' +
	'<ser:template>'+
	'<xsd:name>'+name+'</xsd:name>'+
	'<xsd:privileges xsi:type="xsd:MySQLPrivilegeSetInfo">'+
	'<xsd:alterPriv>'+alterPriv+'</xsd:alterPriv>'+
	'<xsd:createPriv>'+createPriv+'</xsd:createPriv>'+
	'<xsd:deletePriv>'+deletePriv+'</xsd:deletePriv>'+
	'<xsd:dropPriv>'+dropPriv+'</xsd:dropPriv>'+
	'<xsd:indexPriv>'+indexPriv+'</xsd:indexPriv>'+
	'<xsd:insertPriv>'+insertPriv+'</xsd:insertPriv>'+
	'<xsd:selectPriv>'+selectPriv+'</xsd:selectPriv>'+
	'<xsd:updatePriv>'+updatePriv+'</xsd:updatePriv>'+
	'<xsd:alterRoutinePriv>'+alterRoutinePriv+'</xsd:alterRoutinePriv>'+
	'<xsd:createRoutinePriv>'+createRoutinePriv+'</xsd:createRoutinePriv>'+
	'<xsd:createTmpTablePriv>'+createTmpTablePriv+'</xsd:createTmpTablePriv>'+
	'<xsd:createViewPriv>'+createViewPriv+'</xsd:createViewPriv>'+
	'<xsd:eventPriv>'+eventPriv+'</xsd:eventPriv>'+
	'<xsd:executePriv>'+executePriv+'</xsd:executePriv>'+
	'<xsd:grantPriv>'+grantPriv+'</xsd:grantPriv>'+
	'<xsd:lockTablesPriv>'+lockTablesPriv+'</xsd:lockTablesPriv>'+
	'<xsd:referencesPriv>'+referencesPriv+'</xsd:referencesPriv>'+
	'<xsd:showViewPriv>'+showViewPriv+'</xsd:showViewPriv>'+
	'<xsd:triggerPriv>'+triggerPriv+'</xsd:triggerPriv>'+
	'</xsd:privileges>'+
	'</ser:template></ser:updateDatabasePrivilegeTemplate>';
	var result;
	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	modManager.setAuthHeaders(options);
	try {
		editTemplateService.open(options, storageServerURL+'RSSAdmin', false);
		editTemplateService.send(payload);
        var correlationKey = applicationKey + "-" + stage + "-template-" + name;
        try{
            var notificationTitle  = "Database template " + name + " modified in " + stage;
            var notificationMessage = "In environment: " + stage;
            var eventBuilderInstance = EventBuilder.resourceUpdateCompletionEvent(applicationKey, loggedInUser, notificationTitle, notificationMessage, correlationKey, "INFO");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending edit db template success notification \n" + e.message);
        }
	} catch (e) {
        try{
            var notificationTitle  = "Database template " + name + " modification failed in " + stage;
            var eventBuilderInstance = EventBuilder.resourceUpdateCompletionEvent(applicationKey, loggedInUser, notificationTitle, "", correlationKey, "ERROR");
            var eventNotifier = EventNotifier.getInstance().notify(eventBuilderInstance);
        } catch (e) {
            log.error("Error while sending edit db template failure notification \n" + e.message);
        }

		log.error("Error while editing Db template \n" + e.message);
		throw "Error while editing Db template";
	}
};


var getTemplates = function (applicationKey){
	var ws = require('ws');
	var getDatabaseTemplate = new ws.WSRequest();	
	var result;
	var permissionModule = jagg.module("permission");
	var deploymentStages = getProperties(DEPLOYMENT_STAGES);
	var templatesArray=[];
	for(var i=0;i<deploymentStages.length;i++){
		//if user has access to stage
		var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE +deploymentStages[i]);
		if(hasDBConfigurePermissionToStage){
			var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+deploymentStages[i]+'.'+STORAGE_SERVER_URL);
			var options = new Array();
			options.useSOAP = 1.2;
			options.action = "urn:getDatabasePrivilegeTemplates";
			modManager.setAuthHeaders(options);
			
			var payload ='<ser:getDatabasePrivilegeTemplates  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
			'<ser:environmentName>' + deploymentStages[i] + '</ser:environmentName>' +
			'</ser:getDatabasePrivilegeTemplates>';
			
			getDatabaseTemplate.open(options, storageServerURL+'RSSAdmin', false);
			getDatabaseTemplate.send(payload);
			result = getDatabaseTemplate.responseE4X;
			var templateObjects = rssFilter.getAllDatabaseTemplates(applicationKey,deploymentStages[i],buildResponse(result));
			for(var index in  templateObjects){
				var templateObject = templateObjects[index];
				templatesArray.push(templateObject);

			}
		}
	}
	return templatesArray;
};

var getAvailableTemplatesToAttachToDatabase = function (applicationKey, rssInstance){
	var stage = getStageFromRssInstanceName(rssInstance);
	var storageServerURL = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.'+STORAGE_SERVER_URL);
	var ws = require('ws');
	var getDatabaseTemplate = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getDatabasePrivilegeTemplates";
	modManager.setAuthHeaders(options);
	
	var payload ='<ser:getDatabasePrivilegeTemplates  xmlns:ser="http://service.core.rssmanager.carbon.wso2.org">' +
	'<ser:environmentName>' + rssInstance + '</ser:environmentName>' +
	'</ser:getDatabasePrivilegeTemplates>';
	
	var result;
	var permissionModule = jagg.module("permission");
	var templatesArray=[];
	var hasDBConfigurePermissionToStage = permissionModule.isUserAccessGranted(applicationKey,PERMISSION_RESOURCES_READ_FOR_STAGE +stage);
	if(hasDBConfigurePermissionToStage){
		getDatabaseTemplate.open(options, storageServerURL+'RSSAdmin', false);
		getDatabaseTemplate.send(payload);
		result = getDatabaseTemplate.responseE4X;
		var templateObjects = rssFilter.getAllDatabaseTemplates(applicationKey,
		stage,buildResponse(result));
		for(var index in  templateObjects){
			var templateObject = templateObjects[index];
			templatesArray.push(templateObject);
		}
	}
	return templatesArray;
};

function buildResponse(result){
	var databaseObject=[];
	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={};
			var entry=response[index];
			var name=entry.*::name.text();
			task.name=name;
			databaseObject.push(task);
		}
	}
	return databaseObject;
}


function buildTemplate(result){
	var databaseObject=[];

	if(result != undefined){
		var response=result.*::["return"]
		for(var index=0; index < response.length();index++){
			var task={};
			var entry=response[index];
			var name=entry.*::name.text();
			var privilages=entry.*::privileges

			var alterPriv=privilages.*::alterPriv.text();
			var alterRoutinePriv=privilages.*::alterRoutinePriv.text();
			var createPriv=privilages.*::createPriv.text();
			var createRoutinePriv=privilages.*::createRoutinePriv.text();
			var createTmpTablePriv=privilages.*::createTmpTablePriv.text();
			var createViewPriv=privilages.*::createViewPriv.text();
			var deletePriv=privilages.*::deletePriv.text();
			var dropPriv=privilages.*::dropPriv.text();
			var eventPriv=privilages.*:: eventPriv.text();
			var executePriv=privilages.*::executePriv.text();
			var grantPriv=privilages.*::grantPriv.text();
			var indexPriv=privilages.*::indexPriv.text();
			var insertPriv=privilages.*::insertPriv.text();
			var lockTablesPriv=privilages.*::lockTablesPriv.text();
			var referencesPriv=privilages.*::referencesPriv.text();
			var selectPriv=privilages.*::selectPriv.text();
			var showViewPriv=privilages.*::showViewPriv.text();
			var triggerPriv=privilages.*::triggerPriv.text();
			var updatePriv=privilages.*::updatePriv.text();

			task.name=name;
			task.alterPriv=alterPriv;
			task.alterRoutinePriv=alterRoutinePriv;
			task.createPriv=createPriv;
			task.createRoutinePriv=createRoutinePriv;
			task.createTmpTablePriv=createTmpTablePriv;
			task.createViewPriv=createViewPriv;
			task.deletePriv=deletePriv;
			task.dropPriv=dropPriv;
			task.eventPriv=eventPriv;
			task.executePriv=executePriv;
			task.grantPriv=grantPriv;
			task.indexPriv=indexPriv;
			task.insertPriv=insertPriv;
			task.lockTablesPriv=lockTablesPriv;
			task.referencesPriv=referencesPriv;
			task.selectPriv=selectPriv;
			task.showViewPriv=showViewPriv;
			task.triggerPriv=triggerPriv;
			task.updatePriv=updatePriv;

			databaseObject.push(task);
		}
	}
	return databaseObject;
}

%>

