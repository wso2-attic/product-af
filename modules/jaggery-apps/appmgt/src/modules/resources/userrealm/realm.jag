<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('userrealm/realm.jag');
var modManager = jagg.module("manager");
var permissionModule = jagg.module("permission");
var modLifecycle = jagg.module("lifecycle");

var setUserRealmSupport = function (appId, isSet) {
    var uniqueAppRoleName = Packages.org.wso2.carbon.appfactory.common.util.AppFactoryUtil.getRoleNameForApplication(appId);
    var resource = Packages.org.wso2.carbon.appfactory.common.AppFactoryConstants.INVOKE_PERMISSION;
    var action = Packages.org.wso2.carbon.appfactory.common.AppFactoryConstants.CONSUME;
    var stages = modLifecycle.getStages(appId);
            //getProperties(DEPLOYMENT_STAGES);
    try {
        for (var i = 0; i < stages.length; i++) {
            var stage = stages[i];
            var serverUrl = getProperty(STRATOS_PAAS_URL);
            var cookie = modManager.getBackendCookie(serverUrl);
            if (isSet === 'true') {
                permissionModule.authorizeRole(stage, uniqueAppRoleName, resource, action);
            } else {
                permissionModule.denyRole(stage, uniqueAppRoleName, resource, action);
            }
            permissionModule.invalidateAuthorizationCache(stage);
        }

    } catch (e) {
        log.error("Error while setting user realm support for application id : " + appId);
        log.error(e);
        throw e;
    }
};
var isUserRealmSupported = function (appId) {
    var uniqueAppRoleName = Packages.org.wso2.carbon.appfactory.common.util.AppFactoryUtil.getRoleNameForApplication(appId);
    var resource = Packages.org.wso2.carbon.appfactory.common.AppFactoryConstants.INVOKE_PERMISSION;
    var action = Packages.org.wso2.carbon.appfactory.common.AppFactoryConstants.CONSUME;
    var stages = modLifecycle.getStages(appId);
            //getProperties(DEPLOYMENT_STAGES);
    var result = {};
    result.error = 'false';
    result.message = 'true';
    try {
        for (var i = 0; i < stages.length; i++) {
            var stage = stages[i];
            var serverUrl = getProperty(STRATOS_PAAS_URL);
            var cookie = modManager.getBackendCookie(serverUrl);

            result = permissionModule.isRoleAuthorized(stage, uniqueAppRoleName, resource, action);
            if (result.error === 'true' || !result.message === 'true') {
                return result;
            }
        }
        return result;

    } catch (e) {
        log.error("Error while checking user realm support for application id : " + appId);
        log.error(e);
        throw e;
    }
};
%>
