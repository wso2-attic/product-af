<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log("module/application/update/update.jag");


var modLifecycle = jagg.module("lifecycle");
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;

// update the appinfo txt with the given values

var editAppInfo = function (applicationName, applicationKey, applicationDescription,
        applicationType,repositorytype, subdomain, repoAccessability, branchcount, owner) {

	jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER);
	var path = "/_system/governance/" + APPLICATIONS + applicationKey + APP_INFO;
	
	var key = 'application';
	var content = '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">'+
	'<application>'+
	'<description>'+applicationDescription+'</description>'+
	'<name>'+applicationName+'</name>'+
	'<key>'+applicationKey+'</key>'+
	'<type>'+applicationType+'</type>'+
	'<repositorytype>'+repositorytype+'</repositorytype>'+
	'<repoAccessability>'+repoAccessability+'</repoAccessability>'+
	'<branchcount>'+branchcount+'</branchcount>'+
	'<owner>'+owner+'</owner>'+
	'<mappedsubdomain>'+subdomain+'</mappedsubdomain>'+
	'</application>'+
	'</metadata>]]>';
	
	var ws = require('ws');
	var editAppInfoReq = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.1;
	options.action = "urn:editArtifact";
	modManager.setAuthHeaders(options);
	var payload = '<ser:editArtifact xmlns:ser="http://services.generic.governance.carbon.wso2.org">'+
	'<ser:path>'+path+'</ser:path>'+
	'<ser:key>'+key+'</ser:key>'+
	'<ser:info>'+content+'</ser:info>'+
	'<ser:lifecycleAttribute></ser:lifecycleAttribute>'+
	'</ser:editArtifact>';
	
	var result;
	
	try {
		var endPoint =getProperty(GREG_SERVER_URL) + "ManageGenericArtifactService";
		editAppInfoReq.open(options,endPoint, false);
		editAppInfoReq.send(payload);
		result = editAppInfoReq.responseE4X;
		
		if(log.isDebugEnabled()){
			log.debug("Invoking service endpoint :"+endPoint+" returned result :"+result);
		}
		return result;
	} catch (e) {
		log.error("Error in calling ManageGenericArtifactService while editing app info for the application : "
				  + applicationName + " of app owner : " + owner);
		log.error(e);
		throw e;
	}
};

var editAppVersionInfo = function (applicationKey, version, subdomain, currentStatus, deployId, lastStatus,promoteStatus) {
	jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER);
	var path = "/_system/governance/" + APPLICATIONS + applicationKey + "/" + version;
	
	 key = 'appversion';
	 content = '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">'+
			     	'<appversion>'+
				         '<key>'+applicationKey+'</key>'+
				         '<version>'+ version +'</version>'+
				         '<prodmappedsubdomain>'+ subdomain +'</prodmappedsubdomain>'+
				         '<autodeployment>false</autodeployment>'+
				         '<isAutoBuild>true</isAutoBuild>'+
				         '<isAutoDeploy>true</isAutoDeploy>'+
				         '<CurrentBuildStatus>'+currentStatus+'</CurrentBuildStatus>'+
				         '<PromoteStatus>'+promoteStatus+'</PromoteStatus>'+
				         '<lastdeployedid>'+deployId+'</lastdeployedid>'+
				         '<LastBuildStatus>'+lastStatus+'</LastBuildStatus>'+
			         '</appversion>'+
			     '</metadata>]]>';

	
	var ws = require('ws');
	var editAppInfoReq = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.1;
	options.action = "urn:editArtifact";
	modManager.setAuthHeaders(options);
	var payload = '<ser:editArtifact xmlns:ser="http://services.generic.governance.carbon.wso2.org">'+
	'<ser:path>'+path+'</ser:path>'+
	'<ser:key>'+key+'</ser:key>'+
	'<ser:info>'+content+'</ser:info>'+
	'<ser:lifecycleAttribute>serviceLifecycle_lifecycleName</ser:lifecycleAttribute>'+
	'</ser:editArtifact>';
	
	var result;
	var tenantDomain = modManager.getTenantDomain();
	try {
		var endPoint =getProperty(GREG_SERVER_URL) + "ManageGenericArtifactService";
		editAppInfoReq.open(options,endPoint, false);
		editAppInfoReq.send(payload);
		result = editAppInfoReq.responseE4X;
		
		if(log.isDebugEnabled()){
			log.debug("Invoking service endpoint :"+endPoint+" returned result :"+result);
		}
		return result;
	} catch (e) {
		log.error("Error in calling ManageGenericArtifactService while editing app version info of the application : "
				  + applicationKey + " of tenant domain : " + tenantDomain + " with new version : " + version);
		log.error(e);
		throw e;
	}
};


var updatePromoteStatus = function (appKey, nextStage, version, state){
    jagg.module("permission").checkUserActionPermission(appKey,PERMISSION_APPLICATION_MEMBER);
	var tenantDomain=modManager.getTenantDomain() ;
	var applicationInfoService;
	var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
	try{
		applicationInfoService = server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationInfoService');
       	applicationInfoService.updateRxtWithPromoteState(appKey,nextStage,version,"Promote",state);
	}catch(e){
		log.error("Error while updating promote status for application : " + appKey + " with version : " + version
				  + " and state : " + state + " in stage : " + nextStage + " of tenant domain : " + tenantDomain);
		log.error(e);
		throw new e;
	}
}

%>
