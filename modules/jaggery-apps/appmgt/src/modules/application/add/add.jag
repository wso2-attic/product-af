<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log("module/application/add/add.jag");

var modLifecycle = jagg.module("lifecycle");
var modManager = jagg.module("manager");

var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.AppCreationEventBuilderUtil;


// creates application in stratos and return svn repository path to application.
var createApplicationBPEL = function (applicationName, applicationKey, applicationDescription,
applicationType,repoAccessibility, repositoryType, userName , applicationURL, version, lifecycleName) {
    var adminUserName=getProperty(ADMIN_USERNAME);
    jagg.module("permission").checkUserActionPermission(applicationKey, PERMISSION_APPLICATION_CREATE);
    if (repoAccessibility == null) {
        repoAccessibility = "shareMain";
    }

    try {

        try {
               var key = 'application';
               var content = '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">'+
               '<application>'+
               '<description>'+applicationDescription+'</description>'+
               '<name>'+applicationName+'</name>'+
               '<owner>'+userName+'</owner>'+
               '<key>'+applicationKey+'</key>'+
               '<type>'+applicationType+'</type>'+
               '<repoAccessability>'+repoAccessibility+'</repoAccessability>'+
               '<repositorytype>'+repositoryType+'</repositorytype>'+
 	           '<applicationCreationStatus>PENDING</applicationCreationStatus>'+
               '</application>'+
               '</metadata>]]>';

               var lifecycleAttribute = null;
            //Publishing app creation started message to wall
            var notificationTitle  = "Application " + applicationName + " creation is initiated.";
            var notificationDescription = "";
            try{
                var eventBuilderInstance = EventBuilder.invokeAppCreationStartedEvent(applicationKey, userName, notificationTitle, notificationDescription, "INFO");
            } catch (e) {
                log.error("Error while sending notification for application creation \n" + e.message);
            }


               modLifecycle.addGenericArtifact(key,content,lifecycleAttribute);

               key = 'appversion';
               content = '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">'+
                            '<appversion>'+
                                '<key>'+applicationKey+'</key>'+
                                '<version>'+version+'</version>'+
	                            '<autodeployment>false</autodeployment>'+
	                            '<isAutoBuild>true</isAutoBuild>'+
	                            '<isAutoDeploy>true</isAutoDeploy>'+
                            '</appversion>'+
                            '<serviceLifecycle><lifecycleName>'+lifecycleName+'</lifecycleName></serviceLifecycle>'+
                      '</metadata>]]>';

               lifecycleAttribute = 'serviceLifecycle_lifecycleName';

               modLifecycle.addGenericArtifact(key,content,lifecycleAttribute);
        } catch (e) {
            log.error("Error while storing resource \n"+e.message);
            throw new Error("Error while storing registry resource");
        }


        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "http://wso2.org";
        options.mep="in-only";
        options["rampart"] = { user : getProperty(ADMIN_USERNAME), userPassword : getProperty(ADMIN_PASSWORD) };
        options["policy"] = <wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
                       xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
                       wsu:Id="UTOverTransport">
                       <wsp:ExactlyOne>
                               <wsp:All>
                                       <sp:TransportBinding
                                               xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
                                               <wsp:Policy>
                                                       <sp:TransportToken>
                                                               <wsp:Policy>
                                                                       <sp:HttpsToken RequireClientCertificate="false" />
                                                               </wsp:Policy>
                                                       </sp:TransportToken>
                                                       <sp:AlgorithmSuite>
                                                               <wsp:Policy>
                                                                       <sp:Basic256 />
                                                               </wsp:Policy>
                                                       </sp:AlgorithmSuite>
                                                       <sp:Layout>
                                                               <wsp:Policy>
                                                                       <sp:Lax />
                                                               </wsp:Policy>
                                                       </sp:Layout>
                                                       <sp:IncludeTimestamp />
                                               </wsp:Policy>
                                       </sp:TransportBinding>
                                       <sp:SignedSupportingTokens
                                               xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
                                               <wsp:Policy>
                                                       <sp:UsernameToken
                                                               sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient" />
                                               </wsp:Policy>
                                       </sp:SignedSupportingTokens>
                                       <rampart:RampartConfig xmlns:rampart="http://ws.apache.org/rampart/policy">
                                               <rampart:encryptionUser>useReqSigCert</rampart:encryptionUser>
                                               <rampart:timestampPrecisionInMilliseconds>true</rampart:timestampPrecisionInMilliseconds>
                                               <rampart:timestampTTL>300</rampart:timestampTTL>
                                               <rampart:timestampMaxSkew>300</rampart:timestampMaxSkew>
                                               <rampart:timestampStrict>false</rampart:timestampStrict>
                                               <rampart:passwordCallbackClass>org.wso2.carbon.appfactory.common.security.PWCBHandler</rampart:passwordCallbackClass>
                                               <rampart:tokenStoreClass>org.wso2.carbon.security.util.SecurityTokenStore</rampart:tokenStoreClass>
                                               <rampart:nonceLifeTime>300</rampart:nonceLifeTime>
                                       </rampart:RampartConfig>
                               </wsp:All>
                       </wsp:ExactlyOne>
               </wsp:Policy>;

        var tenantDomain=modManager.getTenantDomain();

	
        var payload = '<p:CreateApplicationRequest xmlns:p="http://wso2.org"><applicationId xmlns="http://wso2.org">' + applicationKey + '</applicationId>';
        payload += '<applicationType xmlns="http://wso2.org">' + applicationType + '</applicationType><userName xmlns="http://wso2.org">' + userName + '</userName><repositoryType xmlns="http://wso2.org">' + repositoryType + '</repositoryType><adminUserName xmlns="http://wso2.org">' + adminUserName + '</adminUserName><domainName xmlns="http://wso2.org">'+ tenantDomain +'</domainName></p:CreateApplicationRequest>';
        var result;
        var endPoint = getProperty(BPS_SERVER_URL) + "CreateApplication";
        request.open(options, endPoint, false);
        log.debug("Payload :"+payload);
        request.send(payload);
        result = request.responseE4X;
        //var resultNS = new Namespace("http://wso2.org");
        //var repositoryPath = result.resultNS::["result"].text();

        log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);

        if (log.isDebugEnabled()) {
            log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
        }
    } catch (e) {
        log.error("Error while creating application \n" + e.message);
        throw "Error while creating application";
    }
    //return repositoryPath;
};


var isApplicationKeyAvailable = function (applicationKey, auth) {

	if(auth){
		jagg.module("permission").isUserAccessGrantedForPlatform(PERMISSION_APPLICATION_CREATE);
	}

	var ws = require('ws');
	var request = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.1;
	options.timeout = 1000000;
	options.action = "urn:isApplicationIdAvailable";
	modManager.setAuthHeaders(options);
	var payload = '<isApplicationIdAvailable xmlns="http://service.mgt.application.appfactory.carbon.wso2.org"><applicationKey xmlns="http://service.mgt.application.appfactory.carbon.wso2.org">'+applicationKey+'</applicationKey></isApplicationIdAvailable>';
	var result;
	var status={};
	try {
		var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
		request.open(options,endPoint, false);
		request.send(payload);
		result=request.responseE4X;
		if (log.isDebugEnabled()) {
			log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
		}
	} catch (e) {
		log.error("Error while checking for application key \n" + e.message);
		throw "Error while checking for application key";
	}
	status.isAvailable=result.*::["return"].text();
	return status;

};


var isAppNameAlreadyAvailable = function (applicationName) {

    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:isApplicationNameAvailable";
    modManager.setAuthHeaders(options);
    var payload = '<isApplicationNameAvailable xmlns="http://service.mgt.application.appfactory.carbon.wso2.org"><applicationName xmlns="http://service.mgt.application.appfactory.carbon.wso2.org">'+applicationName+'</applicationName></isApplicationNameAvailable>';
    var result;
    var status={};
    try {
        var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
        request.open(options,endPoint, false);
        request.send(payload);
        result=request.responseE4X;
        if (log.isDebugEnabled()) {
            log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
        }
    } catch (e) {
        log.error("Error while checking for application name \n" + e.message);
        throw "Error while checking for application name";
    }
    status.isAvailable=result.*::["return"].text();
    return status;

}

var stroreUploadedApplication = function (uploadedApplicationName, file, type) {

    validateUploadedApplication(file, type);
    if (log.isDebugEnabled) {
        log.debug("Uploaded application path:" + TMP_UPLOADED_APPLICATIONS_PATH);
    }

    var destination = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/" + modManager.getTenantDomain();
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();
    }
    destinationDir = new File(destination);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();
    }
    var tmpFileName = destination + "/" + uploadedApplicationName + "." + getExtenstionByAppType(type) +
                      UPPLOADABLE_SUFFIX;
    file.move(tmpFileName);

    if (log.isDebugEnabled()) {
        log.debug("Successfuly stored the uploaded file to tmp location " + TMP_UPLOADED_APPLICATIONS_PATH);
    }

};

function validateUploadedApplication(file, applicationType) {

	var fileRealExtension = getExtenstionByAppType(applicationType);
	var uploadedFileExtention = file.getName().split('.').pop();
	if(fileRealExtension != uploadedFileExtention){
		log.error("Incompatible File Type.");
		throw new Exception("Incompatible File Type.");
	}
	log.info("Application extention valided sucessfully");

};

function getExtenstionByAppType(applicationType){
    return modManager.getApplicationTypeBean(applicationType).getExtension();
};

%>
