<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log("module/build/get/list.jag");

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;

var getBuildInfoByApplicationId = function(applicationId) {
    jagg.module("permission").checkUserActionPermission(applicationId,PERMISSION_BUILD);
    var statistics, tenantDomain=modManager.getTenantDomain();
 	var context=multitenancy.getPrivilegedCarbonContext();
 	var tenantManager= multitenancy.getTenantManager();
 	try{
 		context.startTenantFlow();
 		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
 		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
 		statistics = server.osgiService('org.wso2.carbon.appfactory.core.build.ContinuousIntegrationStatisticsService').getApplicationStatistics(applicationId,[[]]);
 	}finally{
 		context.endTenantFlow();
 	}
 	var elementsArray = new Array();

	for (var data in statistics) {
		var staticstic = statistics[data];
		var innerElement = {};
		innerElement.name = staticstic.name;
		innerElement.value = staticstic.value;
		elementsArray.push(innerElement);
	}
	return elementsArray;
    };


/*var getBuildInfoByApplicationId = function(applicationId) {
    jagg.module("permission").checkUserActionPermission(applicationId,PERMISSION_BUILD);
        var ws = require("ws");
        var buildService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:getApplicationStatistics";
        modManager.setAuthHeaders(options);
        var payload = '<p:getApplicationStatistics xmlns:p="http://build.core.appfactory.carbon.wso2.org"><p:applicationId>' + applicationId + '</p:applicationId></p:getApplicationStatistics>';
        var result;

        try {
        	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ContinuousIntegrationStatisticsService";
        	buildService.open(options,endPoint, false);
        	buildService.send(payload);
        	result = buildService.responseE4X;
        	var ns = new Namespace("http://build.core.appfactory.carbon.wso2.org");
        	var ax225 = new Namespace("http://dto.core.appfactory.carbon.wso2.org/xsd");
        	result = result.ns::["return"];

        	var elementsArray = new Array();

        	for (var buildData in result) {
        		var buildInfo = result[buildData];
        		var name = buildInfo.ax225::["name"].text();
        		var value = buildInfo.ax225::["value"].text();

        		var innerElement = {};
        		innerElement.name = name;
        		innerElement.value = value;

        		elementsArray.push(innerElement);
        	}

        	return elementsArray;
        } catch (e) {
        	log.error("Error while getting build information \n" + e.message);
        	throw "Error while getting build information";
        }

        return arrApplications;
    };*/

var getTagNamesOfPersistedArtifacts = function(applicationId, version) {
    jagg.module("permission").checkUserActionPermission(applicationId,PERMISSION_BUILD);
        var ws = require("ws");
        var getTagNames = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:getTagNamesOfPersistedArtifacts";
        modManager.setAuthHeaders(options);
        var payload = '<p:getTagNamesOfPersistedArtifacts xmlns:p="http://deploy.core.appfactory.carbon.wso2.org"><p:applicationId>' + applicationId + '</p:applicationId><p:version>' + version + '</p:version></p:getTagNamesOfPersistedArtifacts>';
        var result;
        var tenantDomain = modManager.getTenantDomain();
        try {
        	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationDeployer";
        	getTagNames.open(options,endPoint, false);
        	getTagNames.send(payload);
        	result = getTagNames.responseE4X;
        	var ns = new Namespace("http://deploy.core.appfactory.carbon.wso2.org");
        	result = result.ns::["return"].text();
        	for (var userIndex in result) {
        		var user = result[userIndex];
        	}
        	return result;
        } catch (e) {
            log.error("Error while retrieving tag names of persisted artifacts  of the application : " + applicationId
                      + " and version : " + version + " of tenant domain : " + tenantDomain);
            log.error(e);
            throw e;
        }
        return arrApplications;
    }
 %>
