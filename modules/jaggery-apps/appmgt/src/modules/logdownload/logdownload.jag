<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log("module/logdownload/logdownload.jag");


var modManager = jagg.module("manager");

var downloadLogFile = function (applicationKey, stage, version, date, pageNumber) {
    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_VISIBILITY_STAGE+stage);

    var appName = "" ;

    if(version == "trunk"){
        appName = applicationKey + "-default-SNAPSHOT";
    }else{
        appName = applicationKey + "-" + version;
    }

    if(!date  || date == ""){
        date = constructCurrentDate();
        return downloadDailyLogs(appName, stage, pageNumber);
    }else{
        var currentDate = constructCurrentDate();
        if(currentDate == date){
            return downloadDailyLogs(appName, stage, pageNumber);
        }else if(compareDates(currentDate,date)){
            var fileName= date  +'.log';
            return downloadArchivedLogFile(appName, stage, fileName);
        }else{
            log.debug("Given date is greater than the current date");
        }
    }
    return "";

};

var  compareDates = function(current, original){
    var currentDateSegments = current.replace(/_/g,'/');
    var originalDateSegments = original.replace(/_/g, '/');

    return new Date(currentDateSegments).getTime() > new Date(originalDateSegments).getTime();

};

var constructCurrentDate = function(){
    var d = new Date();
    var date;

    var curr_date = ("0" + d.getDate()).slice(-2)
    var curr_month = ("0" + (d.getMonth() + 1)).slice(-2); //Months are zero based
    var curr_year = d.getFullYear();

    date = curr_year + "_" + curr_month + "_" + curr_date;
    return date;
};

//view daily logs
var downloadDailyLogs = function (appName, stage, pageNumber){
    log.debug("Downloading daily logs");

    var ws = require("ws");
    var applicationMgtService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:getPaginatedApplicationLogEvents";

    var tenantDomain = modManager.getTenantDomain();

    //We need to make the numbers start from 0
    pageNumber = pageNumber -1;

    var payload ='<xsd:getPaginatedApplicationLogEvents xmlns:xsd="http://org.apache.axis2/xsd">' +
            '<xsd:pageNumber>' + pageNumber + '</xsd:pageNumber>' +
            '<xsd:type></xsd:type>' +
            '<xsd:keyword></xsd:keyword>' +
            '<xsd:applicationName>' + appName + '</xsd:applicationName>' +
            '<xsd:domain>'+ tenantDomain +'</xsd:domain>' +
            '<xsd:serverKey></xsd:serverKey>' +
            '</xsd:getPaginatedApplicationLogEvents>';
    var cloudEndpoint= getProperty('ApplicationDeployment.DeploymentStage.'+stage+'.LogServerURL');
    modManager.setAuthHeaders(options);

    try {
        var logViewerEndpoint = cloudEndpoint + "LogViewer";
	applicationMgtService.open(options, logViewerEndpoint, false);

        applicationMgtService.send(payload);
        return getDownloadedDailyLog(applicationMgtService.responseE4X, stage);

    } catch (e) {
        log.error("Error occurred while downloading daily logs from stage : " + stage + " of application : "
                  + appName + " of tenant domain : " + tenantDomain);
        if(e.message.indexOf("Error occured while invoking the service") > -1) {
            log.info("Resending request to download daily logs from stage : " + stage + " of application : "
                     + appName + " of tenant domain : " + tenantDomain);
            try {
                applicationMgtService = new ws.WSRequest();
                applicationMgtService.open(options, logViewerEndpoint, false);
                applicationMgtService.send(payload);
                return getDownloadedDailyLog(applicationMgtService.responseE4X, stage);
            } catch (e1) {
                log.error("Error occurred while resending request to downloading daily logs from stage : " + stage +
                          " of application : " + appName + " of tenant domain : " + tenantDomain);
                log.error(e1);
                throw e1;
            }
        }
        log.error(e);
        throw e;
    }
};

var getDownloadedDailyLog = function (result, stage){
    var allEvents=result.*::["return"];
    var numberOfPages=allEvents.*::["numberOfPages"].text();
    var logEvents = allEvents.*::["logInfo"];

    //message is coming in reverse order
    var logEvent="";
    for(var i=logEvents.length()-1;i>=0;i--){
        var entry=logEvents[i];
        var serverName=entry.*::serverName;
        var logTime=entry.*::logTime;
        var logger=entry.*::logger;
        var message=entry.*::message;
        var priority=entry.*::priority;
        var stacktrace=entry.*::stacktrace;
        //recreate log line

        if(serverName.length() == 0){
            continue;
        }
        logEvent= logEvent + "\n" +"["+serverName+"]"+"["+logTime+"]"+"["+logger+"]"+message+"\n"+stacktrace;
        //print it
    }
    log.info("Log download from "+ stage + " server is successful");
    //return empty string otherwise the returned value is appended to log file
    return {numberOfPages : numberOfPages, logEvents : logEvent};
};

var downloadArchivedLogFile = function (applicationKey, stage, logFileName) {
    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_VISIBILITY_STAGE+stage);

    log.debug("Downloading archived logs");

    var ws = require("ws");
    var applicationMgtService = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:downloadArchivedApplicationLogFiles";

    var tenantDomain = modManager.getTenantDomain();

    var decoder = Packages.org.apache.commons.codec.binary.Base64;

    var string = Packages.java.lang.String;
    var payload ='<xsd:downloadArchivedApplicationLogFiles xmlns:xsd="http://org.apache.axis2/xsd">'
                      + '<xsd:logFile>' + logFileName + '</xsd:logFile>'
                      + '<xsd:domain>' + tenantDomain + '</xsd:domain>'
                      + '<xsd:serverKey></xsd:serverKey>'
                      + '<xsd:applicationName>' + applicationKey + '</xsd:applicationName>'
                  + '</xsd:downloadArchivedApplicationLogFiles>';
    var cloudEndpoint= getProperty('ApplicationDeployment.DeploymentStage.'+stage+'.LogServerURL');
    modManager.setAuthHeaders(options);
    try {
        var logViewerEndpoint = cloudEndpoint + "LogViewer";
        applicationMgtService.open(options, logViewerEndpoint, false);

        applicationMgtService.send(payload);
        return getDownloadedArchivedFile(applicationMgtService.responseE4X, stage);

    } catch (e) {
        log.error("Error occurred while downloading archived log file : " + logFileName + " from stage : " + stage
                  + " of application : " + appName + " of tenant domain : " + tenantDomain);
        if(e.message.indexOf("Error occured while invoking the service") > -1){
            log.info("Resending request to download archived log file : " + logFileName + " from stage : " + stage
                     + " of application : " + appName + " of tenant domain : " + tenantDomain);
            try {
                applicationMgtService = new ws.WSRequest();
                applicationMgtService.open(options, logViewerEndpoint, false);
                applicationMgtService.send(payload);
                return getDownloadedArchivedFile(applicationMgtService.responseE4X, stage);
            } catch(e1) {
                log.error("Error occurred while resending request to downloading archived log file : " + logFileName +
                          " from stage : " + stage + " of application : " + appName + " of tenant domain : " + tenantDomain);
                log.error(e1);
                throw e1;
            }
        }
        log.error(e);
        throw e;
    }
};

var getDownloadedArchivedFile = function(result, stage){
    if(result != undefined){

        var allEvents=result.*::["return"].text();
        var content = decoder.decodeBase64(allEvents);

        var contentString = new string(content);

        log.info("Log download from "+ stage + " server is successful");
        return contentString;
        //return empty string otherwise the returned value is appended to log file
    }
    return "";
};

//This action returns a json Object as {allVersions : [{"stage" : "Development", "versions" : ["trunk", "1.2.1"]}, {"stage" : "Testing", "versions" : ["1.3.1"]}]}

var getVersionsOfApplicationInStages = function (userName, applicationKey) {
    var modApplication = jagg.module("application");
    var applicationResult = parse(modApplication.getAppVersionsInStages(applicationKey, userName));
    var appVersions = Array();
    var stages = {};
    var versions = applicationResult[0].versions; //JSON Object the represents the versions, stages
    for (var j = 0; j < versions.length; j++) {
        var versionObj = versions[j];

        var currentStage = versionObj.stage;
        if (stages.hasOwnProperty(currentStage)) { //if an already checked stage appened the versions to the versionList
            var versionList = stages[currentStage];
            versionList.push(versionObj.version);
            stages[currentStage] = versionList;
        } else {
            var versionList = new Array(); //else new versionList array
            versionList.push(versionObj.version);
            stages[currentStage] = versionList;
        }
    }

    // below logic is for handling use case: if there is an application version in production stage,
    // the users should be able to see logs of that particular version in Development and Testing too.
    // More info @ https://wso2.org/jira/browse/APPFAC-2282
    var lifecycleMod = jagg.module("lifecycle");
    var permissionModule = jagg.module("permission");
    var allStages = parse(modApplication.getAllStages(applicationKey));
    for (var stageIndex in allStages) {
        var stage = allStages[stageIndex];
        if (permissionModule.isUserAccessGranted(applicationKey, PERMISSION_VISIBILITY_STAGE + stage)) {
            var allVersions = [];
            if (stages[stage]) {
                allVersions = allVersions.concat(stages[stage]);
            }
            var nextStage = lifecycleMod.getNextLifeCycleStage(stage,applicationKey);
            while (nextStage) {
                if (stages[nextStage]) {
                    allVersions = allVersions.concat(stages[nextStage]);
                }
                nextStage = lifecycleMod.getNextLifeCycleStage(nextStage,applicationKey);
            }
            appVersions.push({stage: stage, versions: allVersions});
        }
    }
    return {allAppVersions: appVersions};

};


%>
